<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GalacticBankRC4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../xsd/md.xsd">
	<cues>
		<cue name="Vault" namespace="this" version="4">
			<conditions>
				<check_any>
					<event_game_loaded />
					<event_game_started />
					<event_player_created />
					<event_cue_signalled cue="md.Setup.Start" />
				</check_any>
				<check_value value="not @player.allmodules.{player.module}.isscenario" />
			</conditions>
			<actions>
				<debug_text text="'Vault: '+event.name" />
				<set_value name="global.$GB_Vault" exact="this" />

				<set_value name="Vault.$debug" exact="100" />
				<set_value name="Vault.$BankStations" exact="table[]" />
				<set_value name="Vault.$SetupComplete" exact="false" />
				<set_value name="Vault.$ResetAccounts" exact="true" />
				<set_value name="Vault.$UniqueAccountVariables" exact="true" />
				<set_value name="Vault.$ResetFactionRelations" exact="true" />
				<set_value name="Vault.$RemoveOld" exact="true" />

				<set_value name="Vault.$LoanInterestPeriod" exact="8h" />
				<set_value name="Vault.$PaymentInterval" exact="30min" />

				<set_value name="Vault.$NextCreateJobShips" exact="player.age+60s" />

				<!-- Lootbox -->
				<create_group groupname="Vault.$BankTransports" />
				<set_value name="Vault.$LootboxDrops" exact="table[]" />
				<set_value name="Vault.$DespawnLootboxes" exact="player.age+60s" />

				<!-- loan payment -->
				<set_value name="Vault.$NextPayment" exact="player.age+60s" />

				<set_value name="Vault.$RevealSectors" exact="false" />

				<!-- account lists -->
				<set_value name="Vault.$WithdrawFees" exact="[0.005,0.005,0.0025,0.0025,0]" />
				<set_value name="Vault.$UndockedFees" exact="[0.005,0.005,0.0025,0.0025,0]" />
				<set_value name="Vault.$PaymentFees" exact="[0.20,0.15,0.10,0.05,0]" />
				<set_value name="Vault.$Rates" exact="[0.005,0.0075,0.01,0.0125,0.015]" />
				<set_value name="Vault.$Periods" exact="[12h,10h,8h,6h,5h]" />
				<set_value name="Vault.$LoanRates" exact="[0.15,0.125,0.1,0.075,0.05]" />
				<set_value name="Vault.$LoanCollateralRates" exact="[0.2,0.3,0.5,1,2]" />

				<!--
          Vault.$Accounts.{$Faction} = table[
						$balance = (int)ct,
						$loan_balance = float,
						$interest_time = time,
						$collateral = [ships]
						$closed = bool,
						$relation = float,
						$inheritanceTax = float,

						- Lists -
						$fee = [float],
						$undockedFee = [float],
						$rate = [float],
						$period = [time],
						$loan_rate = [float],
						$loan_collateral_rate = [float],
					]
        -->
				<set_value name="Vault.$Accounts" exact="table[
						{faction.bankingclan} = table[],
						{faction.hapes} = table[],
						{faction.huttpirates} = table[],
						{faction.mandoraiders} = table[],
						{faction.valarian} = table[],
						{faction.blacksun} = table[],
						{faction.naboo} = table[],
						{faction.sith} = table[],
						{faction.kamino} = table[],
						{faction.rebelalliance} = table[]
					]" />

				<!-- factions that use banking clan accounts with operational branch vaults -->
				<set_value name="Vault.$MajorFactionList" exact="table[
					{faction.galempire} = true,
					{faction.ascendancy} = true,
					{faction.newrepublic} = true,
					{faction.commerceguild} = true,
					{faction.corporate} = true,
					{faction.huttcartel} = true,
					{faction.anoat} = true,
					{faction.mandodw} = true
				]" />

			</actions>
			<patch sinceversion="4">
				<set_value name="Vault.$PaymentFees" exact="[0.20,0.15,0.10,0.05,0]" />
				<do_for_each name="$faction" in="$Accounts">
					<set_value name="$Account" exact="$Accounts.{$faction}" />
					<set_value name="$Account.$paymentFee" exact="$PaymentFees.{$Account.$tier}" />
				</do_for_each>
				<set_value name="$SetupComplete" exact="false" />
				<set_value name="$RemoveOld" exact="true" />
				<set_value name="global.$GB_Vault.$debug" exact="100" />
			</patch>
			<cues>
				<cue name="Init">
					<conditions>
						<check_any>
							<event_game_loaded />
							<event_game_started />
							<event_player_created />
							<event_cue_signalled />
						</check_any>
						<check_value value="not @player.allmodules.{player.module}.isscenario" />
					</conditions>
					<delay exact="1s" />
					<actions>
						<debug_text text="'Init: '+event.name" chance="global.$GB_Vault.$debug" />
						<!-- disable npc reactions bank loans -->
						<do_if value="@md.kuertee_npc_reactions.NPCReactions.exists">
							<set_value name="md.kuertee_npc_reactions.NPCReactions.$userIsBankLoans" exact="false" />
						</do_if>

						<!-- clear unnecessary bnc ships -->
						<find_object owner="faction.bankingclan" space="player.galaxy" name="$objects" job="[
							'bankingclan_techsupport_trader_m',
							'bankingclan_bio_trader_m',
							'bankingclan_energycell_trader_l',
							'bankingclan_energycell_trader_m',
							'bankingclan_equipment_trader_m',
							'bankingclan_ship_construction_trader_m',
							'bankingclan_refinedgas_trader_m',
							'bankingclan_refinedmineral_trader_l',
							'bankingclan_refinedmineral_trader_m',
							'bankingclan_tech_trader_m',
							'bankingclan_food_trader_m',
							'bankingclan_free_miner_m_liquid',
							'bankingclan_free_miner_m_mineral',
							'bankingclan_free_miner_m_rhydonium',
							'bankingclan_free_miner_l_ice',
							'bankingclan_free_miner_m_ice',
							'bankingclan_construction_vessel_l',
							'bankingclan_construction_vessel_l_playeronly'
						]" multiple="true" />
						<do_for_each name="$object" in="$objects">
							<destroy_object object="$object" />
						</do_for_each>
						<remove_value name="$objects" />

						<do_if value="not $SetupComplete">
							<signal_cue_instantly cue="InitSetup" />
						</do_if>
						<reset_cue cue="this" />
					</actions>
				</cue>
				<cue name="InitSetup">
					<conditions>
						<event_cue_signalled />
					</conditions>
					<actions>
						<debug_text text="'Init: '+event.name" chance="global.$GB_Vault.$debug" />

						<set_value name="$SetupComplete" exact="true" />

						<!-- Clear old BNC objects -->
						<do_if value="$RemoveOld">
							<show_notification text="'resetting all bnc objects'" chance="global.$GB_Vault.$debug" />
							<set_value name="$RemoveOld" exact="false" />
							<clear_group group="Vault.$BankTransports" />
							<set_value name="$BankStations" exact="table[]" />
							<set_value name="$CreateStations" exact="true" />
							<set_value name="$CreateShips" exact="true" />
							<find_object owner="faction.bankingclan" space="player.galaxy"
								name="$objects" multiple="true" />
							<do_for_each name="$object" in="$objects">
								<destroy_object object="$object" />
							</do_for_each>
							<remove_value name="$objects" />
						</do_if>

						<!-- Unlock Relations-->
						<set_faction_relation_locked faction="faction.bankingclan" locked="true" />
						<do_for_each name="$Faction" in="$Accounts.keys.list">
							<set_faction_relation_locked faction="$Faction" locked="false" />
						</do_for_each>

						<!-- setup accounts -->
						<do_if value="$ResetAccounts">
							<show_notification text="'resetting accounts'" chance="global.$GB_Vault.$debug" />
							<set_value name="$ResetAccounts" exact="false" />
							<do_for_each name="$Faction" in="$Accounts.keys.list">
								<set_value name="$Account" exact="$Accounts.{$Faction}" />
								<!-- stored as ct: use ()Cr -->
								<set_value name="$Account.$balance" exact="0" />
								<set_value name="$Account.$loan_balance" exact="0" />
								<set_value name="$Account.$payment" exact="0" />
								<set_value name="$Account.$paymentsMissed" exact="0" />
								<set_value name="$Account.$arrears" exact="0" />
								<!-- stored as ct: average price * 100 -->
								<set_value name="$Account.$collateral_value" exact="0" />
								<set_value name="$Account.$bribefactor" exact="100000000" />
								<set_value name="$Account.$tier" exact="2" />
								<set_value name="$Account.$closed" exact="false" />
								<set_value name="$Account.$relation" exact="0" />
								<set_value name="$Account.$collateral" exact="table[]" />
								<set_value name="$Account.$collateral.$XL" exact="[]" />
								<set_value name="$Account.$collateral.$L" exact="[]" />
								<set_value name="$Account.$collateral.$M" exact="[]" />
								<set_value name="$Account.$collateral.$S" exact="[]" />
								<set_value name="$Account.$interest_time" exact="null" />
								<set_value name="$Account.$fee" exact="$WithdrawFees.{2}" />
								<set_value name="$Account.$paymentFee" exact="$PaymentFees.{2}" />
								<set_value name="$Account.$rate" exact="$Rates.{2}" />
								<set_value name="$Account.$period" exact="$Periods.{2}" />
								<set_value name="$Account.$undocked_fee" exact="$UndockedFees.{2}" />
								<set_value name="$Account.$loan_rate" exact="$LoanRates.{2}" />
								<set_value name="$Account.$loan_collateral_rate" exact="$LoanCollateralRates.{2}" />
							</do_for_each>
						</do_if>

						<do_if value="$UniqueAccountVariables">
							<!-- inheritance taxes -->
							<set_value name="$Accounts.{faction.bankingclan}.$inheritanceTax" exact="0.2" />
							<set_value name="$Accounts.{faction.rebelalliance}.$inheritanceTax" exact="0.25" />
							<set_value name="$Accounts.{faction.hapes}.$inheritanceTax" exact="0.5" />
							<set_value name="$Accounts.{faction.huttpirates}.$inheritanceTax" exact="0.75" />
							<set_value name="$Accounts.{faction.mandoraiders}.$inheritanceTax" exact="0.75" />
							<set_value name="$Accounts.{faction.valarian}.$inheritanceTax" exact="0.75" />
							<set_value name="$Accounts.{faction.blacksun}.$inheritanceTax" exact="0.75" />
							<set_value name="$Accounts.{faction.naboo}.$inheritanceTax" exact="0.1" />
							<set_value name="$Accounts.{faction.kamino}.$inheritanceTax" exact="0.1" />
							<set_value name="$Accounts.{faction.sith}.$inheritanceTax" exact="0.1" />

							<!-- Gain rep based on account balance -->
							<set_value name="$Accounts.{faction.bankingclan}.$maxRepCr" exact="1000000" />
							<set_value name="$Accounts.{faction.rebelalliance}.$maxRepCr" exact="1000000" />
							<set_value name="$Accounts.{faction.hapes}.$maxRepCr" exact="1000000" />
							<set_value name="$Accounts.{faction.huttpirates}.$maxRepCr" exact="1000000" />
							<set_value name="$Accounts.{faction.mandoraiders}.$maxRepCr" exact="1000000" />
							<set_value name="$Accounts.{faction.valarian}.$maxRepCr" exact="1000000" />
							<set_value name="$Accounts.{faction.blacksun}.$maxRepCr" exact="1000000" />
							<set_value name="$Accounts.{faction.naboo}.$maxRepCr" exact="1000000" />
							<set_value name="$Accounts.{faction.kamino}.$maxRepCr" exact="1000000" />
							<set_value name="$Accounts.{faction.sith}.$maxRepCr" exact="1000000" />
							<!-- Gain rep based on loan payments -->
							<set_value name="$Accounts.{faction.bankingclan}.$paymentRepRate" exact="0.0005" />
							<set_value name="$Accounts.{faction.rebelalliance}.$paymentRepRate" exact="0.0005" />
							<set_value name="$Accounts.{faction.hapes}.$paymentRepRate" exact="0.0005" />
							<set_value name="$Accounts.{faction.huttpirates}.$paymentRepRate" exact="0.0005" />
							<set_value name="$Accounts.{faction.mandoraiders}.$paymentRepRate" exact="0.0005" />
							<set_value name="$Accounts.{faction.valarian}.$paymentRepRate" exact="0.0005" />
							<set_value name="$Accounts.{faction.blacksun}.$paymentRepRate" exact="0.0005" />
							<set_value name="$Accounts.{faction.naboo}.$paymentRepRate" exact="0.0005" />
							<set_value name="$Accounts.{faction.kamino}.$paymentRepRate" exact="0.0005" />
							<set_value name="$Accounts.{faction.sith}.$paymentRepRate" exact="0.0005" />
						</do_if>

						<!-- set faction relations -->
						<do_if value="$ResetFactionRelations">
							<show_notification text="'resetting relations'" chance="global.$GB_Vault.$debug" />

							<set_value name="$ResetFactionRelations" exact="false" />
							<set_faction_relation faction="faction.bankingclan"
								otherfaction="faction.player"
								value="0" />

							<set_value name="$factionList" exact="[ 
								faction.anoat, faction.mandodw, faction.huttcartel, faction.corporate, faction.bountyhunters,
								faction.commerceguild, faction.newrepublic, faction.ascendancy, faction.sith, 
								faction.galempire, faction.sienar, faction.transgalmeg, faction.rendili, 
								faction.moncal, faction.kuat, faction.incom, faction.tagge, faction.tradefederation, 
								faction.baobab, faction.twinsuns, faction.indibhg, faction.corellia, faction.hoersh
							]" />
							<do_for_each name="$faction" in="$factionList">
								<set_faction_relation faction="faction.bankingclan"
									otherfaction="$faction"
									value="1" />
								<set_faction_relation faction="$faction"
									otherfaction="faction.bankingclan"
									value="1" />
							</do_for_each>

							<set_value name="$factionList" exact="[ 
									faction.blacksun, faction.valarian, faction.mandoraiders, 
									faction.huttpirates, faction.hapes
							]" />
							<do_for_each name="$faction" in="$factionList">
								<set_faction_relation faction="faction.bankingclan"
									otherfaction="$faction"
									value="-1" />
								<set_faction_relation faction="$faction"
									otherfaction="faction.bankingclan"
									value="-1" />
							</do_for_each>
						</do_if>

						<!-- Create Stations -->
						<do_if value="@$CreateStations">
							<set_value name="$CreateStations" exact="false" />

							<create_position name="$Position" max="20km" />
							<set_value name="$Y_Position" min="-5km" max="5km" />
							<set_value name="$Position" exact="position.[$Position.x, $Y_Position, $Position.z]" />

							<find_sector name="$sector" macro="macro.swi_clusterscipio_sector001_macro" />
							<create_station rawname="'{20777,1001} {20777,1005} - {20777,1003} {20777,1004}'"
								state="componentstate.operational"
								name="$station"
								sector="$sector"
								owner="faction.bankingclan" macro="macro.station_bankingclan_mainvault_macro"
								constructionplan="'vault_bankingclan_main'">
								<safepos allowyaxis="false" value="$Position" includeplotbox="true" />
							</create_station>
							<set_faction_headquarters faction="faction.bankingclan" station="$station" />
							<set_loadout_level object="$station" exact="0.9" />
							<signal_objects object="player.galaxy" param="'init station'" param2="$station"
								param3="false" />

							<set_value name="$name"
								exact="'{20777,1001} {20777,1005} - {20777,1006} {20777,1004}'" />

							<set_value name="$branchMacros" exact="[
								macro.swi_clusterbastion_sector001_macro,
								macro.swi_clustereriadu_sector001_macro,
								macro.swi_clustercoruscant_sector001_macro,
								macro.swi_clustercantonica_sector001_macro,
								macro.swi_clusterhypori_sector001_macro,
								macro.swi_clusternarshadda_sector001_macro,
								macro.swi_clusteranpath_sector001_macro,
								macro.swi_clustermandalore_sector001_macro
							]" />
							<do_for_each name="$macro" in="$branchMacros">
								<find_sector name="$sector" macro="$macro" />
								<create_station rawname="$name" state="componentstate.operational"
									name="$station"
									sector="$sector"
									owner="faction.bankingclan" macro="macro.station_bankingclan_branchvault_macro"
									constructionplan="'vault_bankingclan_branch'">
									<safepos allowyaxis="false" value="$Position" includeplotbox="true" />
								</create_station>
								<set_loadout_level object="$station" exact="0.9" />
								<signal_objects object="player.galaxy" param="'init station'" param2="$station"
									param3="false" />
							</do_for_each>

							<remove_value name="$sector" />
							<remove_value name="$station" />
						</do_if>

						<set_job_active activate="true" job="'bankingclan_transport_l'" />
						<set_job_active activate="true" job="'bankingclan_transport_m'" />

						<!-- create ships -->
						<do_if value="@$CreateShips">
							<set_value name="$CreateShips" exact="false" />
							<set_value name="$sectorMacros" exact="[
								macro.swi_clusterbastion_sector001_macro,
								macro.swi_clustereriadu_sector001_macro, 
								macro.swi_clustercoruscant_sector001_macro, 
								macro.swi_clustercantonica_sector001_macro, 
								macro.swi_clusterhypori_sector001_macro, 
								macro.swi_clusternarshadda_sector001_macro, 
								macro.swi_clusteranpath_sector001_macro, 
								macro.swi_clustermandalore_sector001_macro
							]" />
							<do_all exact="8">
								<set_value name="$macro" exact="$sectorMacros.random" />
								<remove_from_list name="$sectorMacros" exact="$macro" />
								<find_sector name="$sector" macro="$macro" />
								<find_station_by_true_owner name="$station" checkoperational="false"
									faction="faction.bankingclan" space="$sector" />
								<request_job_ship name="$NewShip" job="'bankingclan_transport_m'" requester="$sector" />
								<spawn_waiting_job_ship zone="$station.zone" ship="$NewShip">
									<safepos object="$station" space="$sector" />
								</spawn_waiting_job_ship>
								<debug_text text="'commander: '+$sector.knownname+' '+$NewShip" chance="global.$GB_Vault.$debug" />
								<do_if value="$NewShip.exists">
									<get_subordinate_jobs jobs="$subs" amount="$subsNum" commander="$NewShip" />
									<do_all exact="$subs.count" counter="$i">
										<do_all exact="$subsNum.{$i}">
											<request_job_ship name="$NewSub" job="$subs.{$i}" requester="$sector" />
											<spawn_waiting_job_ship zone="$NewShip.zone" ship="$NewSub">
												<safepos object="$station" space="$sector" />
											</spawn_waiting_job_ship>
											<do_if value="$NewSub.exists">
												<debug_text text="'sub: '+$sector.knownname+' '+$NewSub" chance="global.$GB_Vault.$debug" />
												<set_object_commander object="$NewSub" commander="$NewShip" />
												<activate_waiting_job_ship ship="$NewSub" />
											</do_if>
										</do_all>
									</do_all>
									<activate_waiting_job_ship ship="$NewShip" />
								</do_if>
							</do_all>
							<find_sector name="$sector" macro="macro.swi_clusterscipio_sector001_macro" />
							<find_station_by_true_owner name="$station" checkoperational="false"
								faction="faction.bankingclan" space="$sector" />
							<do_all exact="4">
								<request_job_ship name="$NewShip" job="'bankingclan_transport_l'" requester="$sector" />
								<spawn_waiting_job_ship zone="$station.zone" ship="$NewShip">
									<safepos object="$station" space="$sector" />
								</spawn_waiting_job_ship>
								<do_if value="$NewShip.exists">
									<debug_text text="'commanderL: '+$sector.knownname+' '+$NewShip" chance="global.$GB_Vault.$debug" />
									<get_subordinate_jobs jobs="$subs" amount="$subsNum" commander="$NewShip" />
									<do_all exact="$subs.count" counter="$i">
										<do_all exact="$subsNum.{$i}">
											<request_job_ship name="$NewSub" job="$subs.{$i}" requester="$sector" />
											<spawn_waiting_job_ship zone="$NewShip.zone" ship="$NewSub">
												<safepos object="$station" space="$sector" />
											</spawn_waiting_job_ship>
											<do_if value="$NewSub.exists">
												<debug_text text="'subL: '+$sector.knownname+' '+$NewSub" chance="global.$GB_Vault.$debug" />
												<get_subordinate_jobs jobs="$subsSubs" amount="$subsSubsNum" commander="$NewSub" />
												<do_all exact="$subsSubs.count" counter="$j">
													<do_all exact="$subsSubsNum.{$j}">
														<request_job_ship name="$NewSubSub" job="$subsSubs.{$j}" requester="$sector" />
														<spawn_waiting_job_ship zone="$NewSub.zone" ship="$NewSubSub">
															<safepos object="$station" space="$sector" />
														</spawn_waiting_job_ship>
														<do_if value="$NewSubSub.exists">
															<debug_text text="'subsubL: '+$sector.knownname+' '+$NewSubSub" chance="global.$GB_Vault.$debug" />
															<set_object_commander object="$NewSubSub" commander="$NewSub" />
															<activate_waiting_job_ship ship="$NewSubSub" />
														</do_if>
													</do_all>
												</do_all>
												<set_object_commander object="$NewSub" commander="$NewShip" />
												<activate_waiting_job_ship ship="$NewSub" />
											</do_if>
										</do_all>
									</do_all>
									<activate_waiting_job_ship ship="$NewShip" />
								</do_if>
							</do_all>
						</do_if>

						<reset_cue cue="this" />
					</actions>
				</cue>

				<cue name="BankingClan_Relation_Change">
					<conditions>
						<event_player_relation_changed />
						<check_value value="event.object == null and event.param != null" />
						<check_value value="$Accounts.keys.list.indexof.{event.param}" />
					</conditions>
					<actions>
						<debug_text text="'BankingClan_Relation_Change: '+event.name" chance="global.$GB_Vault.$debug" />
						<set_value name="$Faction" exact="event.param" />
						<set_value name="$Account" exact="$Accounts.{$Faction}" />
						<set_value name="$oldRelation" exact="$Account.$relation" />
						<set_value name="$newRelation" exact="$Faction.relationto.{faction.player}" />
						<set_value name="$changeAmount" exact="event.param2.{1} - event.param2.{2}" />
						<set_value name="$tierChange" exact="false" />
						<!-- 30 -->
						<do_if value="$newRelation ge 1 and $oldRelation lt 1">
							<set_value name="$tier" exact="5" />
							<set_value name="$tierChange" exact="true" />
						</do_if>
						<!-- 20 -->
						<do_elseif value="($newRelation ge 0.1 and $oldRelation lt 0.1) or ($newRelation lt 1 and $oldRelation ge 1)">
							<set_value name="$tier" exact="4" />
							<set_value name="$tierChange" exact="true" />
						</do_elseif>
						<!-- 10 -->
						<do_elseif value="($newRelation ge 0.01 and $oldRelation lt 0.01) or ($newRelation lt 0.1 and $oldRelation ge 0.1)">
							<set_value name="$tier" exact="3" />
							<set_value name="$tierChange" exact="true" />
						</do_elseif>
						<!-- 0 -->
						<do_elseif value="($newRelation ge 0 and $oldRelation lt 0) or ($newRelation lt 0.01 and $oldRelation ge 0.01)">
							<set_value name="$tier" exact="2" />
							<set_value name="$tierChange" exact="true" />
						</do_elseif>
						<!-- -9 -->
						<do_elseif value="($newRelation gt -0.01 and $oldRelation le -0.01) or ($newRelation lt 0 and $oldRelation ge 0)">
							<set_value name="$tier" exact="1" />
							<set_value name="$tierChange" exact="true" />
						</do_elseif>
						<!-- -10 -->
						<do_elseif value="($newRelation le -0.01 and $oldRelation gt -0.01)">
							<set_value name="$tier" exact="0" />
							<set_value name="$Account.$fee" exact="0" />
							<set_value name="$Account.$rate" exact="0" />
							<set_value name="$Account.$period" exact="0h" />
							<set_value name="$Account.$balance" exact="0" />
							<set_value name="$tierChange" exact="true" />
							<set_value name="$Account.$closed" exact="true" />
							<run_actions ref="md.kuertee_emergent_missions.Bounties.Bounties_RegisterPilot">
								<param name="Pilot" value="player.entity" />
							</run_actions>
						</do_elseif>
						<set_value name="$Account.$relation" exact="$newRelation" />
						<do_if value="$tierChange">
							<set_value name="$Account.$tier" exact="$tier" />
							<set_value name="$Account.$fee" exact="$WithdrawFees.{$tier}" />
							<set_value name="$Account.$paymentFee" exact="$WithdrawFees.{$tier}" />
							<set_value name="$Account.$rate" exact="$Rates.{$tier}" />
							<set_value name="$Account.$period" exact="$Periods.{$tier}" />
							<set_value name="$Account.$undocked_fee" exact="$UndockedFees.{$tier}" />
							<set_value name="$Account.$loan_rate" exact="$LoanRates.{$tier}" />
							<set_value name="$Account.$loan_collateral_rate" exact="$LoanCollateralRates.{$tier}" />

							<do_if value="$Account.$balance gt 0">
								<set_value name="$opening"
									exact="'This is a Priority Message from '+$Faction.name+'.'" />
								<do_if value="$Account.$closed">
									<set_value name="$text"
										exact="'Your account has been closed.\n\nIn accordance with your account contract:\n\nArticle 1530.69201.56882\nClause 831\n\nYour assets held by '+$Faction.name+' have been permanently forfeited.\n\nWe wish you well.'" />
								</do_if>
								<do_else>
									<set_value name="$data" exact="'
									Period: '+$Account.$period/3600+'hr\n
									Balance: '+$Account.$balance+'\n
									Rate: '+$Account.$rate*100+'%\n\n
									Loan Balance: '+$Account.$loan_balance+'\n
									Rate: '+$Account.$rate*100+'%\n
									Collateral Rate: '+$Account.$loan_collateral_rate*100+'%'
								" />
									<do_if value="$Account.$loan_balance gt 0">
										<set_value name="$data" operation="add" exact="'\n
										Payment: '+$Account.$payment+'\n
										Collateral Value: '+$Account.$collateral_value								
									" />
										<do_if value="$Account.$paymentsMissed gt 0">
											<set_value name="$data" operation="add" exact="'\n
											Payments Missed: '+$Account.$paymentsMissed+'\n
											Overdue: '+$Account.$arrears+'\n
										'" />
										</do_if>
									</do_if>
									<do_if value="$Faction == faction.bankingclan">
										<set_value name="$data" operation="add"
											exact="'\n\n'+{20777, 1006}+' Withdrawal Fee: '+$Account.$fee*100+'%'" />
									</do_if>
									<do_if value="$changeAmount gt 0">
										<do_if value="$open">
											<set_value name="$statusText"
												exact="'We are proud to announce a once in a lifetime, hurry now before it is too late, very special, just for you, opportunity to open an account with us.\n\n'" />
										</do_if>
										<do_else>
											<set_value name="$statusText" exact="'Your account status has improved!\n\n'" />
										</do_else>
										<set_value name="$text"
											exact="$opening+'\n\n!! Congratulations !!\n\n'+$statusText+$data+'\n\nWe wish you well.'" />
									</do_if>
									<do_else>
										<set_value name="$text"
											exact="$opening+'\n\n!!! WARNING !!!\n\nWe regret to inform you that based on your recent actions, your account status has been reduced.\n\n'+$data+'\n\nWe wish you well.'" />
									</do_else>
									<remove_value name="$data" />
								</do_else>
								<write_incoming_message highpriority="true"
									source="$Faction.name"
									title="'Account Status'"
									text="$text" />
								<show_help force="true" duration="8s"
									custom="'You have received a Priority Message from '+$Faction.name" position="20" />
								<show_notification
									text="'You have received a Priority Message from '+$Faction.name"
									timeout="8s" sound="ui_mon_eve_money_up" />
								<remove_value name="$tierChange" />
								<remove_value name="$text" />
							</do_if>
						</do_if>
						<reset_cue cue="this" />
					</actions>
				</cue>

				<cue name="BankOffice">
					<cues>
						<cue name="BankOfficeAddToStation" version="1">
							<conditions>
								<event_object_signalled object="player.entity" param="'K_ArriveAndLeaveStations'" />
								<check_any>
									<check_all>
										<check_value value="@event.param2.$teleportTo.exists" />
										<check_value value="not @event.param2.$teleportTo.isplayerowned" />
									</check_all>
									<check_all>
										<check_value value="@event.param2.$dockAt.exists" />
										<check_value value="not @event.param2.$dockAt.isplayerowned" />
									</check_all>
								</check_any>
							</conditions>
							<actions>
								<debug_text text="'BankOfficeAddToStation: '+event.name" chance="global.$GB_Vault.$debug" />
								<set_value name="$BankManager" exact="null" />
								<set_value name="$station" exact="@event.param2.$teleportTo" />
								<do_if value="not @$station.exists">
									<set_value name="$station" exact="@event.param2.$dockAt" />
								</do_if>
								<do_if value="not @$station.exists">
									<set_value name="$station" exact="player.station" />
								</do_if>
								<!-- add bank office if vault or faction has a vault -->
								<set_value name="$owner" exact="$station.owner" />
								<do_if value="$owner == faction.bankingclan or @$MajorFactionList.{$owner}">
									<set_value name="$Faction" exact="faction.bankingclan" />
									<set_value name="$bankStation" exact="@$BankStations.{$station}" />
									<do_if value="not $bankStation">
										<set_value name="$BankStations.{$station}" exact="table[$isSpawned = false]" />
										<set_value name="$bankStation" exact="@$BankStations.{$station}" />
									</do_if>
									<do_if value="not $bankStation.$isSpawned">
										<set_value name="$bankStation.$isSpawned" exact="true" />
										<set_value name="$seed" exact="@$bankStation.$seed" />
										<do_if value="not $seed">
											<set_value name="$seed" exact="$station.seed + lookup.roomtype.list.indexof.{roomtype.office}" />
											<set_value name="$bankStation.$seed" exact="$seed" />
										</do_if>
										<create_cue_actor name="$BankManager" cue="this" seed="$seed">
											<select faction="$owner" />
											<owner exact="$Faction" />
										</create_cue_actor>
										<set_entity_traits entity="$BankManager" missionactor="true" />
										<set_entity_overrides entity="$BankManager" icon="'specialist'" />
										<set_value name="$corridorMacro" exact="@$bankStation.$corridorMacro" />
										<set_value name="$roomMacro" exact="@$bankStation.$roomMacro" />
										<do_if value="not $corridorMacro or not $roomMacro">
											<set_value name="$race" exact="$station.owner.primaryrace" />
											<get_room_definition macro="$corridorMacro" race="$race" tags="tag.corridor" seed="$seed" />
											<get_room_definition macro="$corridorMacro" tags="tag.corridor" seed="$seed" chance="if $corridorMacro then 0 else 100" />
											<get_room_definition macro="$roomMacro" race="$race" tags="tag.office" seed="$seed" />
											<get_room_definition macro="$roomMacro" tags="tag.office" seed="$seed" chance="if $roomMacro then 0 else 100" />
											<set_value name="$bankStation.$corridorMacro" exact="$corridorMacro" />
											<set_value name="$bankStation.$roomMacro" exact="$roomMacro" />
										</do_if>
										<set_value name="$roomName" exact="@$bankStation.$roomName" />
										<do_if value="not $roomName">
											<!-- vault office -->
											<do_if value="$owner == faction.bankingclan">
												<set_value name="$roomName" exact="'{20777, 1005} - {20777, 1004} {20777, 1007}'" />
											</do_if>
											<!-- branch office -->
											<do_else>
												<set_value name="$roomName" exact="'{20777, 1005} - {20777, 1006} {20777, 1007}'" />
											</do_else>
											<set_value name="$bankStation.$roomName" exact="$roomName" />
										</do_if>
										<create_dynamic_interior object="$station"
											corridor="$corridorMacro" room="$roomMacro"
											name="$roomName"
											interiorname="$interior" corridorname="$corridor" roomname="$room" roomtype="roomtype.office"
											seed="$seed" />
										<do_if value="$interior and $corridor and $room">
											<find_npc_slot name="$roomSlot" object="$room" tags="tag.control" />
											<do_if value="$roomSlot">
												<add_actor_to_room actor="$BankManager" slot="$roomSlot" />
											</do_if>
										</do_if>
									</do_if>
								</do_if>
								<do_elseif value="@$Accounts.keys.list.indexof.{player.container.tradenpc.trueowner}">
									<set_value name="$BankManager" exact="player.container.tradenpc" />
								</do_elseif>
							</actions>
							<cues>
								<!-- Cleanup when the player leaves the station -->
								<cue name="BankOfficeCleanUp">
									<conditions>
										<event_object_signalled object="player.entity" param="'K_ArriveAndLeaveStations'" />
										<check_any>
											<check_value value="@event.param2.$leaveFrom == $station" />
											<check_value value="@event.param2.$undockFrom == $station" />
										</check_any>
									</conditions>
									<actions>
										<debug_text text="'BankOfficeCleanUp: '+event.name" chance="global.$GB_Vault.$debug" />
										<do_if value="$BankManager">
											<remove_actor_from_room actor="$BankManager" />
											<destroy_object object="$BankManager" />
										</do_if>
										<do_if value="$interior">
											<remove_dynamic_interior object="$station" interior="$interior" />
											<destroy_object object="$interior" />
										</do_if>
										<destroy_object object="$room" />
										<set_value name="$BankStations.{$station}.$isSpawned" exact="false" />
										<reset_cue cue="parent" />
										<reset_cue cue="this" />
									</actions>
								</cue>
								<!-- conversation cues -->
								<cue name="BankerConversationStart">
									<conditions>
										<check_any>
											<event_cue_signalled />
											<check_all>
												<event_conversation_started conversation="default" />
												<check_value value="event.object == $BankManager" />
											</check_all>
										</check_any>
									</conditions>
									<actions>
										<debug_text text="'BankerConversationStart: '+event.name" chance="global.$GB_Vault.$debug" />
										<do_if value="event.name == 'event_cue_signalled'">
											<set_value name="$convoOption_Banker_Account" exact="@event.param.$convoOption_Banker_Account" />
										</do_if>
										<do_else>
											<set_value name="$convoOption_Banker_Account" exact="true" />
										</do_else>
										<do_if value="event.name == 'event_conversation_started' and @md.ExtendedConversationMenu.Main.exists">
											<set_value name="md.ExtendedConversationMenu.Main.$convOptions.$BankManager" exact="table[
												$signalCue = BankerConversationStart,
												$params = table[$convoOption_Banker_Account = @$convoOption_Banker_Account]
											]" />
										</do_if>
										<do_else>
											<do_if value="$convoOption_Banker_Account">
												<do_if value="$Accounts.{$BankManager.trueowner}.$closed">
													<set_value name="$bribe" exact="-0.0099-$Accounts.{$BankManager.trueowner}.$relation * $Accounts.{$BankManager.trueowner}.$bribefactor" />
													<add_player_choice text="'Account Closed'" section="Banker_Account" selectable="false" />
													<do_if value="player.money ge ($bribe)Cr">
														<add_player_choice text="'Bribe %,s'.[$bribe]+'Cr'" section="Banker_Bride" choiceparam="$bribe" />
													</do_if>
													<do_else>
														<add_player_choice text="'Bribe %,s'.[$bribe]+'Cr'" section="Banker_Bride" choiceparam="$bribe" selectable="false" />
													</do_else>
												</do_if>
												<do_else>
													<add_player_choice text="'Access Account'" section="Banker_Account" />
													<add_player_choice text="'Apply for Loan'" section="Banker_Loan" />
												</do_else>
												<find_ship name="$Ships" owner="faction.player" space="player.container.zone" docked="true" multiple="true" recursive="true">
													<match_any_cargo wares="ware.bank_large_lootbox" />
												</find_ship>
												<do_if value="@player.entity.inventory.{ware.inv_bank_lootbox}.exists or $Ships.count gt 0">
													<add_player_choice text="'Return Lootbox(s)'" section="Banker_Return" />
												</do_if>
											</do_if>
										</do_else>
										<reset_cue cue="this" />
									</actions>
								</cue>
								<cue name="BankerConversationNext">
									<conditions>
										<event_conversation_next_section sectionprefix="Banker_" />
									</conditions>
									<actions>
										<debug_text text="'BankerConversationNext: '+event.name" chance="global.$GB_Vault.$debug" />
										<do_if value="event.param == 'Banker_Bribe'">
											<reward_player money="event.param2 * -1" />
											<add_faction_relation faction="$BankManager.trueowner" otherfaction="faction.player" value="-0.0099 - $BankManager.trueowner.relationto.{faction.player}" reason="relationchangereason.illegalplot" />
										</do_if>
										<do_if value="event.param == 'Banker_Account'">
											<signal_cue_instantly cue="Bank_Menu" param="$BankManager" />
										</do_if>
										<do_if value="event.param == 'Banker_Loan'">
											<signal_cue_instantly cue="Bank_LoanMenu" param="$BankManager" />
										</do_if>
										<do_if value="event.param == 'Banker_Return'">
											<set_value name="$lootboxes" exact="@player.entity.inventory.{ware.inv_bank_lootbox}.count" />
											<set_value name="$largelootboxes" exact="0" />
											<do_for_each name="$ship" in="$Ships">
												<set_value name="$largelootboxes" operation="add" exact="@$ship.cargo.{ware.bank_large_lootbox}.count" />
											</do_for_each>
											<set_value name="$reward" exact="$lootboxes * 1000 + $largelootboxes * 20000" />
											<add_faction_relation faction="faction.bankingclan" otherfaction="faction.player" value="$lootboxes * 0.00082 + $largelootboxes * 0.0032" reason="relationchangereason.missioncompleted" />
											<write_incoming_message source="faction.bankingclan.name" title="'We Greatly Appreciate You'" text="'Thank you for returning '+$lootboxes+$largelootboxes+' lootboxes. We have deposited: %,s'.[$reward]+'Cr into your account.'" />
											<signal_cue_instantly cue="Transfer" param="table[$Faction = faction.bankingclan, $money = ($reward)Cr, $message='Reward']" />
										</do_if>
										<reset_cue cue="this" />
									</actions>
								</cue>
							</cues>
						</cue>
					</cues>
				</cue>

				<!-- ui account access interaction button -->
				<cue name="Vault_AccountInteractMenu">
					<conditions>
						<event_cue_signalled cue="md.Interact_Menu_API.Get_Actions" />
						<check_value value="@event.param.$object.sector == player.sector" />
						<check_value value="@event.param.$object.isclass.{class.station}" />
						<check_value value="@$Accounts.keys.list.indexof.{event.param.$object.owner} or @$MajorFactionList.{event.param.$object.sector.owner}" />
						<check_value value="@event.param.$object.owner.relationto.{faction.player} gt -0.01" />
						<check_value value="@event.param.$object.distanceto.{player.entity} le 10km" />
					</conditions>
					<actions>
						<debug_text text="'Vault_AccountInteractMenu: '+event.name" chance="global.$GB_Vault.$debug" />
						<do_if value="(@$MajorFactionList.{event.param.$object.sector.owner} and $Accounts.{faction.bankingclan}.$balance gt 0) or @$Accounts.{event.param.$object.owner}.$balance gt 0">
							<signal_cue_instantly cue="md.Interact_Menu_API.Add_Action" param="table[
								$id = 'Vault_AccountMenu',
								$section = 'main',
								$text = 'Access Account',
								$icon = 'menu_swi_credits',
								$callback = Bank_Menu,
								$echo = table[$Faction = event.param.$object.owner]
							]" />
						</do_if>
						<reset_cue cue="this" />
					</actions>
				</cue>

				<cue name="Bank_Menu" instantiate="true">
					<conditions>
						<event_cue_signalled />
					</conditions>
					<delay exact="1ms" />
					<actions>
						<debug_text text="'Bank_Menu: '+event.name" chance="global.$GB_Vault.$debug" />
						<!-- determine account -->
						<!-- undocked -->
						<do_if value="event.param.$echo?">
							<set_value name="$Faction" exact="event.param.$echo.$Faction" />
							<set_value name="$docked" exact="false" />
							<do_if value="$Faction == faction.bankingclan">
								<set_value name="$Title" exact="'InterGalactic Bank Account'" />
								<set_value name="$vault" exact="true" />
							</do_if>
							<do_elseif value="@$MajorFactionList.{$Faction}">
								<set_value name="$Faction" exact="faction.bankingclan" />
								<set_value name="$Title" exact="'InterGalactic Bank Account'" />
								<set_value name="$vault" exact="false" />
							</do_elseif>
							<do_else>
								<set_value name="$Title" exact="$Faction+': Account'" />
								<set_value name="$vault" exact="false" />
							</do_else>
						</do_if>
						<!-- docked -->
						<do_else>
							<set_value name="$Faction" exact="event.param.trueowner" />
							<set_value name="$owner" exact="event.param.station.owner" />
							<set_value name="$docked" exact="true" />
							<do_if value="$owner == faction.bankingclan">
								<set_value name="$Title" exact="'InterGalactic Bank Account'" />
								<set_value name="$vault" exact="true" />
							</do_if>
							<do_elseif value="@$MajorFactionList.{$owner}">
								<set_value name="$Faction" exact="faction.bankingclan" />
								<set_value name="$Title" exact="'InterGalactic Bank Account'" />
								<set_value name="$vault" exact="false" />
							</do_elseif>
							<do_else>
								<set_value name="$Title" exact="$Faction+': Account'" />
								<set_value name="$vault" exact="false" />
							</do_else>
						</do_else>

						<!-- set cue variablse -->
						<set_value name="$Account" exact="$Accounts.{$Faction}" />
						<set_value name="$AccountBalance" exact="$Account.$balance" />
						<set_value name="$LoanBalance" exact="$Account.$loan_balance" />
						<set_value name="$Rate" exact="$Account.$rate" />
						<set_value name="$Period" exact="$Account.$period" />
						<set_value name="$LoanRate" exact="$Account.$loan_rate" />
						<set_value name="$Payment_amount" exact="0" />
						<set_value name="$Deposit_amount" exact="0" />
						<set_value name="$Withdraw_amount" exact="0" />
						<set_value name="$interest_amount" exact="0" />
						<set_value name="$loanInterest_amount" exact="0" />

						<!-- set withdrawal fee -->
						<set_value name="$Fee" exact="if $vault then 0 else $Account.$fee" />
						<set_value name="$Fee" operation="add" exact="if $docked then 0 else $Account.$undocked_fee" />
						<signal_cue cue="Bank_Menu_Open" />
					</actions>
					<cues>
						<cue name="Bank_Menu_Open" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<delay exact="1ms" />
							<actions>
								<set_value name="$Account.$collateral_value" exact="0" />
								<do_for_each name="$table" in="$Account.$collateral">
									<do_for_each name="$ship" in="$Account.$collateral.{$table}">
										<set_value name="$Account.$collateral_value" operation="add" exact="($ship.macro.ware.averageprice/100)f*$LoanCollateralRate" />
									</do_for_each>
								</do_for_each>
								<debug_text text="'Bank_Menu_Open: '+event.name" chance="global.$GB_Vault.$debug" />
								<!-- update interest -->
								<set_value name="$timeSinceInterest" exact="player.age - $Account.$interest_time" />
								<do_if value="$timeSinceInterest ge 1">
									<set_value name="$interest_amount" exact="$AccountBalance * ((1+$Rate)^($timeSinceInterest / $Period) - 1)" />
									<set_value name="$Account.$balance" operation="add" exact="$interest_amount" />
									<set_value name="$loanInterest_amount" exact="$LoanBalance * ((1+$LoanRate)^($timeSinceInterest / $LoanInterestPeriod) - 1)" />
									<set_value name="$Account.$loan_balance" operation="add" exact="$loanInterest_amount" />
									<set_value name="$Account.$interest_time" exact="player.age" />
									<set_value name="$AccountBalance" exact="$Account.$balance" />
									<set_value name="$LoanBalance" exact="$Account.$loan_balance" />
								</do_if>
								<set_value name="$Deposit_amount" exact="0" />
								<set_value name="$Withdraw_amount" exact="0" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Create_Menu" param="table[
									$id = 'bank_menu',
									$columns = 1,
									$title = $Title,
									$height = 400,
									$width = 300
								]" />
								<!-- loan -->
								<do_if value="$LoanBalance gt 0">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$halign='center',
										$text='Loan Status'
									]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$halign='right',
										$text=$LoanRate * 100 + '% interest per ' + $LoanInterestPeriod / 60 / 60 + ' hours.'
									]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$halign='right',
										$text='Balance: %,s'.[($LoanBalance)/1]+'Cr'
									]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$halign='right',
										$text='Available: %,s'.[$Account.$collateral_value-$LoanBalance]+'Cr'
									]" />
									<do_if value="(player.money)f/100 ge 1 or $Account.$balance gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[$col=1, $text='']" />
										<do_if value="$Account.$paymentFee gt 0">
											<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
											<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
												$col=1,
												$halign='center',
												$color='Helper.color.red',
												$text='(Manual Payment Fee: '+ $Account.$paymentFee*100 + '%)'
											]" />
										</do_if>
									</do_if>
									<do_if value="(player.money)f/100 ge 1">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Slider" param="table[
										$start = 0,
										$col = 1,
										$text = table[$text='Cash Payment'+if $Account.$paymentFee gt 0 then ' includes fee.' else ''],
										$min = 0, $max = [player.money, $LoanBalance*(1+$Account.$paymentFee)].min, $step = 1, $suffix='Cr',
										$default = 0,
										$onSliderCellChanged = Bank_Menu_Payment_Amount
									]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
										$id = 'Cash',
										$col = 1,
										$text = table[$text='Pay'],
										$onClick = Bank_Menu_Payment
									]" />
									</do_if>
									<do_if value="$Account.$balance gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Slider" param="table[
										$start = 0,
										$col = 1,
										$text = table[$text='Account Transfer'+if $Account.$paymentFee gt 0 then ' includes fee.' else ''],
										$min = 0, $max = [$Account.$balance, $LoanBalance*(1+$Account.$paymentFee)].min, $step = 1, $suffix='Cr',
										$default = 0,
										$onSliderCellChanged = Bank_Menu_Payment_Amount
									]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
										$id = 'Account',
										$col = 1,
										$text = table[$text='Pay'],
										$onClick = Bank_Menu_Payment
									]" />
									</do_if>
								</do_if>
								<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[$col=1, $text='']" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$halign='center',
										$text='Account Status'
									]" />
								<do_if value="$Fee gt 0">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$halign='center',
										$color='Helper.color.red',
										$text='('+{20777, 1006}+' Fee: '+ $Fee*100 + '%)'
									]" />
								</do_if>
								<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
									$col=1,
									$halign='right',
									$text=$Rate * 100 + '% interest per ' + $Period / 60 / 60 + ' hours.'
								]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
									$col=1,
									$halign='right',
									$text='Balance: %,s'.[$Account.$balance]+'Cr'
								]" />
								<do_if value="$interest_amount gt 0">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$halign='right',
										$text='Interest since last visit: %,s'.[$interest_amount]+'Cr'
									]" />
								</do_if>
								<do_if value="(player.money)f/100 ge 1 or $AccountBalance ge 1">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[$col=1, $text='']" />
								</do_if>
								<do_if value="(player.money)f/100 ge 1">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Slider" param="table[
										$id = 'sliderDeposit',
										$start = 0,
										$col = 1,
										$text = table[$text=''],
										$min = 0, $max = player.money, $step = 1, $suffix='Cr',
										$default = 0,
										$onSliderCellChanged = Bank_Menu_Deposit_Amount
									]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
										$col = 1,
										$text = table[$text='Deposit'],
										$onClick = Bank_Menu_Deposit
									]" />
								</do_if>
								<do_if value="$AccountBalance ge 1">
									<do_if value="$Fee gt 0">
										<set_value name="$feetext" exact="'Avalable After '+{20777, 1006}+' Fee'" />
									</do_if>
									<do_else>
										<set_value name="$feetext" exact="''" />
									</do_else>
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Slider" param="table[
										$id = 'sliderWithdraw',
										$start = 0,
										$col = 1,
										$text = table[$text=$feetext],
										$min = 0, $max = $AccountBalance / (1+$Fee), $step = 1, $suffix='Cr',
										$default = 0,
										$onSliderCellChanged = Bank_Menu_Withdraw_Amount
									]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
										$col = 1,
										$text = table[$text='Withdraw'],
										$onClick = Bank_Menu_Withdraw
									]" />
								</do_if>
							</actions>
						</cue>
						<!-- sliders -->
						<cue name="Bank_Menu_Payment_Amount" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<actions>
								<debug_text text="'Bank_Menu_Payment_Amount: '+event.name" chance="global.$GB_Vault.$debug" />
								<set_value name="$Payment_amount" exact="event.param.$value" />
								<cancel_cue cue="this" />
							</actions>
						</cue>
						<cue name="Bank_Menu_Deposit_Amount" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<actions>
								<debug_text text="'Bank_Menu_Deposit_Amount: '+event.name" chance="global.$GB_Vault.$debug" />
								<set_value name="$Deposit_amount" exact="event.param.$value" />
								<cancel_cue cue="this" />
							</actions>
						</cue>
						<cue name="Bank_Menu_Withdraw_Amount" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<actions>
								<debug_text text="'Bank_Menu_Withdraw_Amount: '+event.name" chance="global.$GB_Vault.$debug" />
								<set_value name="$Withdraw_amount" exact="event.param.$value" />
								<cancel_cue cue="this" />
							</actions>
						</cue>

						<!-- actions -->
						<cue name="Bank_Menu_Payment" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<actions>
								<debug_text text="'Bank_Menu_Payment: '+event.name" chance="global.$GB_Vault.$debug" />
								<set_value name="$id" exact="event.param.$id" />
								<do_if value="$id == 'Cash'">
									<set_value name="$balance" exact="(player.money)f/100" />
								</do_if>
								<do_elseif value="$id == 'Account'">
									<set_value name="$timeSinceInterest" exact="player.age - $Account.$interest_time" />
									<set_value name="$Account.$interest_time" exact="player.age" />
									<set_value name="$interest_amount" exact="$Account.$balance * ((1+$Rate)^($timeSinceInterest / $Period) - 1)" />
									<set_value name="$Account.$balance" operation="add" exact="$interest_amount" />
									<set_value name="$balance" exact="$Account.$balance" />
								</do_elseif>
								<do_if value="$balance ge $Payment_amount">
									<set_value name="$loanInterest_amount" exact="$Account.$loan_balance * ((1+$LoanRate)^($timeSinceInterest / $LoanInterestPeriod) - 1)" />
									<do_if value="$Account.$loan_balance - $Payment_amount lt 1">
										<reward_player money="(-$Payment_amount)Cr" />
										<set_value name="$Account.$loan_balance" exact="0" />
										<set_value name="$Account.$payment" exact="0" />
									</do_if>
									<do_else>
										<do_if value="$id == 'Cash'">
											<reward_player money="(-$Payment_amount)Cr" />
										</do_if>
										<do_elseif value="$id == 'Account'">
											<signal_cue_instantly cue="Transfer" param="table[$Faction=$Faction, $money=(-$Payment_amount)Cr, $message='Loan Payment']" />
										</do_elseif>
										<set_value name="$Account.$loan_balance" operation="subtract" exact="$Payment_amount - $loanInterest_amount" />
										<do_if value="$Account.$arrears gt 0">
											<do_if value="$Payment_amount ge $Account.$arrears">
												<set_value name="$Account.$arrears" exact="0" />
												<set_value name="$Account.$paymentsMissed" exact="0" />
												<write_incoming_message highpriority="true" source="$Faction.name" title="'Payments Caught Up'" text="'Thank you for paying off your arrears.'" />
											</do_if>
											<do_else>
												<set_value name="$Account.$arrears" operation="subtract" exact="$Payment_amount" />
												<set_value name="$Account.$paymentsMissed" operation="subtract" exact="($Payment_amount / $Account.$payment)/1" />
											</do_else>
										</do_if>
									</do_else>
									<set_value name="$AccountBalance" exact="$Account.$balance" />
									<set_value name="$LoanBalance" exact="$Account.$loan_balance" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Close_Menu" />
									<signal_cue_instantly cue="Bank_Menu_Open" />
								</do_if>
								<do_else>
									<cancel_cue cue="this" />
								</do_else>
							</actions>
						</cue>
						<cue name="Bank_Menu_Deposit" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<actions>
								<debug_text text="'Bank_Menu_Deposit: '+event.name" chance="global.$GB_Vault.$debug" />
								<debug_text text="'Deposit: '+$Faction.knownname+' '+$AccountBalance+' '+$LoanBalance+' '+player.money/100+' '+$Deposit_amount" chance="global.$GB_Vault.$debug" />
								<do_if value="player.money ge ($Deposit_amount)Cr">
									<do_if value="$AccountBalance == 0 and $LoanBalance == 0">
										<set_value name="$Account.$interest_time" exact="player.age" />
									</do_if>
									<do_else>
										<set_value name="$timeSinceInterest" exact="player.age - $Account.$interest_time" />
										<set_value name="$Account.$interest_time" exact="player.age" />
										<set_value name="$interest_amount" exact="$AccountBalance * ((1+$Rate)^($timeSinceInterest / $Period) - 1)" />
										<set_value name="$Account.$balance" operation="add" exact="$interest_amount" />
										<set_value name="$loanInterest_amount" exact="$LoanBalance * ((1+$LoanRate)^($timeSinceInterest / $LoanInterestPeriod) - 1)" />
										<set_value name="$Account.$loan_balance" operation="add" exact="$loanInterest_amount" />
									</do_else>
									<reward_player money="($Deposit_amount)Cr * -1" />
									<set_value name="$Account.$balance" operation="add" exact="$Deposit_amount" />
									<set_value name="$AccountBalance" exact="$Account.$balance" />
									<set_value name="$LoanBalance" exact="$Account.$loan_balance" />
									<debug_text text="'Deposit: '+$Faction.knownname+' '+$Account.$balance+' '+$Account.$loan_balance+' '+player.money/100+' '+$Deposit_amount" chance="global.$GB_Vault.$debug" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Close_Menu" />
									<signal_cue_instantly cue="Bank_Menu_Open" />
								</do_if>
								<do_else>
									<cancel_cue cue="this" />
								</do_else>
							</actions>
						</cue>
						<cue name="Bank_Menu_Withdraw" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<actions>
								<debug_text text="'Bank_Menu_Withdraw: '+event.name" chance="global.$GB_Vault.$debug" />
								<debug_text text="'Withdraw: '+$Faction.knownname+' '+$AccountBalance+' '+$LoanBalance+' '+player.money/100+' '+$Withdraw_amount" chance="global.$GB_Vault.$debug" />
								<do_if value="$AccountBalance ge $Withdraw_amount">
									<set_value name="$timeSinceInterest" exact="player.age - $Account.$interest_time" />
									<set_value name="$Account.$interest_time" exact="player.age" />
									<set_value name="$interest_amount" exact="$AccountBalance * ((1+$Rate)^($timeSinceInterest / $Period) - 1)" />
									<set_value name="$Account.$balance" operation="add" exact="$interest_amount" />
									<set_value name="$loanInterest_amount" exact="$LoanBalance * ((1+$LoanRate)^($timeSinceInterest / $LoanInterestPeriod) - 1)" />
									<set_value name="$Account.$loan_balance" operation="add" exact="$loanInterest_amount" />
									<debug_text text="$AccountBalance / (1+$Fee) +' | '+ $Withdraw_amount" chance="global.$GB_Vault.$debug" />
									<!-- player wants to empty account -->
									<do_if value="$Withdraw_amount gt $AccountBalance / (1+$Fee) - 1">
										<reward_player money="($Account.$balance)Cr" />
										<set_value name="$Account.$balance" exact="0" />
										<do_if value="$LoanBalance == 0">
											<set_value name="$Account.$interest_time" exact="null" />
										</do_if>
									</do_if>
									<do_else>
										<reward_player money="($Withdraw_amount)Cr" />
										<set_value name="$Account.$balance" operation="subtract" exact="$Withdraw_amount * (1+$Fee)" />
									</do_else>
									<set_value name="$AccountBalance" exact="$Account.$balance" />
									<set_value name="$LoanBalance" exact="$Account.$loan_balance" />
									<debug_text text="'Withdraw: '+$Faction.knownname+' '+$Account.$balance+' '+$Account.$loan_balance+' '+player.money/100+' '+$Withdraw_amount" chance="global.$GB_Vault.$debug" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Close_Menu" />
									<signal_cue_instantly cue="Bank_Menu_Open" />
								</do_if>
								<do_else>
									<cancel_cue cue="this" />
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>

				<cue name="BankTransports" instantiate="true">
					<conditions>
						<check_any>
							<check_all>
								<event_job_ship_activated />
								<check_any>
									<check_value value="event.param.job == 'bankingclan_transport_l'" />
									<check_value value="event.param.job == 'bankingclan_transport_m'" />
									<check_value value="event.param.job == 'bankingclan_transport_m_escort'" />
								</check_any>
							</check_all>
							<event_object_destroyed group="global.$GB_Vault.$BankTransports" />
							<event_object_changed_owner group="global.$GB_Vault.$BankTransports" />
						</check_any>
					</conditions>
					<actions>
						<debug_text text="'BankTransports: '+event.name" chance="global.$GB_Vault.$debug" />
						<do_if value="event.name == 'event_job_ship_activated'">
							<set_value name="$ship" exact="event.param" />
							<add_to_group groupname="global.$GB_Vault.$BankTransports" object="$ship" />
							<set_value name="$capacity" exact="$ship.macro.cargo.capacity.container" />
							<set_value name="$ware" exact="ware.bank_large_lootbox" />
							<add_cargo exact="($capacity / $ware.volume)/1" object="$ship" ware="$ware" />
						</do_if>
						<do_elseif value="event.name == 'event_object_destroyed'">
							<remove_from_group group="global.$GB_Vault.$BankTransports" object="event.object" />
							<do_if value="not (event.param == null) and event.param.isplayerowned">
								<add_faction_relation faction="faction.bankingclan" otherfaction="faction.player" value="-0.005" reason="relationchangereason.killedobject" />
							</do_if>
						</do_elseif>
						<do_elseif value="event.name == 'event_object_changed_owner'">
							<remove_from_group group="global.$GB_Vault.$BankTransports" object="event.object" />
							<do_if value="event.param == faction.player">
								<add_faction_relation faction="faction.bankingclan" otherfaction="faction.player" value="-0.005" reason="relationchangereason.boardedobject" />
							</do_if>
						</do_elseif>
					</actions>
				</cue>

				<cue name="LootboxFinder" instantiate="true">
					<conditions>
						<event_object_dropped_objects group="global.$GB_Vault.$BankTransports" />
					</conditions>
					<actions>
						<debug_text text="'LootboxFinder: '+event.name" chance="global.$GB_Vault.$debug" />
						<do_if value="not event.object.exists">
							<remove_from_group group="global.$GB_Vault.$BankTransports" object="event.object" />
						</do_if>
						<do_for_each name="$drop" in="event.param">
							<do_if value="$drop == ware.bank_large_lootbox or $drop == ware.inv_bank_lootbox">
								<set_drop_persistence object="$drop" />
								<set_value name="global.$GB_Vault.$LootboxDrops.{$drop}" exact="player.age" />
							</do_if>
						</do_for_each>
					</actions>
				</cue>

				<cue name="DespawnLootboxes" instantiate="true" checkinterval="10s">
					<conditions>
						<check_age min="global.$GB_Vault.$DespawnLootboxes" />
						<check_value value="global.$GB_Vault.$LootboxDrops.keys.list.count gt 0" />
					</conditions>
					<actions>
						<debug_text text="'DespawnLootboxes: '+event.name" chance="global.$GB_Vault.$debug" />
						<set_value name="global.$GB_Vault.$DespawnLootboxes" exact="player.age + 120s" />
						<do_for_each name="$drop" in="global.$GB_Vault.$LootboxDrops.keys.list">
							<do_if value="$drop.exists and global.$GB_Vault.$LootboxDrops.{$drop} - player.age gt 24h">
								<destroy_object object="$drop" />
								<remove_value name="global.$GB_Vault.$LootboxDrops.{$drop}" />
							</do_if>
						</do_for_each>
					</actions>
				</cue>

				<cue name="CreateJobShips" instantiate="true" checkinterval="30s">
					<conditions>
						<check_age min="global.$GB_Vault.$NextCreateJobShips" />
					</conditions>
					<actions>
						<debug_text text="'CreateJobShips: '+event.name" chance="global.$GB_Vault.$debug" />
						<set_value name="global.$GB_Vault.$NextCreateJobShips" exact="player.age + 20s" />
						<debug_text text="'begin createjobships'" chance="global.$GB_Vault.$debug" />
						<set_value name="$Faction" exact="faction.bankingclan" />
						<set_value name="$Ship" exact="null" />
						<find_station_by_true_owner name="$mainVault" faction="$Faction" space="player.galaxy" checkoperational="true"
							macro="macro.station_bankingclan_mainvault_macro" />
						<do_if value="@$mainVault.isoperational">
							<set_value name="$Sector" exact="$mainVault.sector" />
							<debug_text text="'Main Sector: '+$Sector.knownname" chance="global.$GB_Vault.$debug" />
							<get_suitable_job result="$Job" faction="$Faction" tags="[tag.banking, tag.trader, tag.container]" size="class.ship_m" />
							<do_if value="not ($Job == null)">
								<find_station name="$Wharf" wharf="true" space="player.galaxy" checkoperational="true" sortbydistanceto="$Sector" comment="any wharf">
									<match_relation_to faction="$Faction" comparison="ge" relation="neutral" />
								</find_station>
								<do_if value="@$Wharf.isoperational">
									<set_value name="$Sector" exact="$Wharf.sector" />
									<debug_text text="'Build at: '+$Sector.knownname+' | '+$Wharf.knownname" chance="global.$GB_Vault.$debug" />
									<find_zone name="$Zone" space="$Sector">
										<match_child class="class.station" checkoperational="true" />
									</find_zone>
								</do_if>
							</do_if>
							<do_else>
								<get_suitable_job result="$Job" faction="$Faction" tags="[tag.banking, tag.trader, tag.container]" size="class.ship_l" />
								<do_if value="not ($Job == null)">
									<find_station name="$Shipyard" shipyard="true" space="player.galaxy" checkoperational="true" sortbydistanceto="$Sector" comment="any shipyard">
										<match_relation_to faction="$Faction" comparison="ge" relation="neutral" />
									</find_station>
									<do_if value="@$Shipyard.isoperational">
										<set_value name="$Sector" exact="$Shipyard.sector" />
										<debug_text text="'Build at: '+$Sector.knownname+' | '+$Shipyard.knownname" chance="global.$GB_Vault.$debug" />
										<find_zone name="$Zone" space="$Sector">
											<match_child class="class.station" checkoperational="true" />
										</find_zone>
									</do_if>
								</do_if>
							</do_else>
							<do_if value="@$Job">
								<debug_text text="'Jobs: '+$Job" chance="global.$GB_Vault.$debug" />
								<request_job_ship name="$Ship" job="$Job" requester="$Sector" zone="$Zone" />
								<do_if value="@$Ship">
									<activate_job_ship_orders ship="$Ship" />
									<debug_text text="$Ship + ' ' + $Ship.knownname + ' requested from job ' + $Job" chance="global.$GB_Vault.$debug" />
								</do_if>
								<do_else>
									<debug_text text="'ship unable to be requested for job ' + $Job" chance="global.$GB_Vault.$debug" />
								</do_else>
							</do_if>
						</do_if>
						<signal_cue_instantly cue="ProcessJobShips" />
					</actions>
				</cue>

				<cue name="ProcessJobShips" instantiate="true">
					<conditions>
						<event_cue_signalled />
					</conditions>
					<actions>
						<debug_text text="'ProcessJobShips: '+event.name" chance="global.$GB_Vault.$debug" />
						<set_value name="$WaitTime" min="20s" max="40s" />
						<set_value name="$Shipyards" exact="[]" />
						<set_value name="$Faction" exact="faction.bankingclan" />

						<!--Find waiting subordinate ships-->
						<find_waiting_subordinate name="$ShipsToBuild" owner="$Faction" hasbuildingtask="false" multiple="true">
							<match_parent negate="true" class="class.component" comment="Only interested in the disconnected ships" />
						</find_waiting_subordinate>
						<debug_text text="$Faction.knownname + ' has ' + $ShipsToBuild.count + ' waiting subordinate ships'" chance="global.$GB_Vault.$debug" />

						<!--Find lead job ships
              note: previously, lead job ships had a lower chance of being selected than subordinates to help commanders waiting too long
              it is now an even chance to give more opportunity to construct economic ships. Further selection preferences may be needed in extreme circumstances-->
						<find_waiting_job_ship name="$ShipsToBuild" owner="$Faction" hasbuildingtask="false" multiple="true" append="true">
							<match_parent negate="true" class="class.component" comment="Only interested in the disconnected ships" />
						</find_waiting_job_ship>
						<debug_text text="$Faction.knownname + ' has ' + $ShipsToBuild.count + ' waiting ships'" chance="global.$GB_Vault.$debug" />

						<do_if value="$ShipsToBuild.count">
							<!--TODO @Owen should we be checking for the extension of the shipyard's sector-->
							<!--TODO @Owen hasassignedcontrolentity-->
							<find_station name="$Shipyards" canbuildships="true" canbuildfor="$Faction" hascontrolentity="controlpost.shiptrader" space="player.galaxy" multiple="true" />
							<debug_text text="$Faction.knownname + ' ' + player.age + ' Finding shipyards'" chance="global.$GB_Vault.$debug" />

							<!--Build a table with details on the shipyard so we don't have to query it too often-->
							<set_value name="$ShipyardTable" exact="table[]" />
							<do_all exact="$Shipyards.count" counter="$i" reverse="true">
								<set_value name="$Shipyard" exact="$Shipyards.{$i}" />

								<!--Check if the shipyard can build any ship macros for this faction-->
								<get_ship_build_wares object="$Shipyards.{$i}" result="$BuildableShipWares" canbuild="true" />
								<!--TODO @Owen use get_equipment_build_wares and check if the ship loadout is available at the shipyard-->
								<do_if value="$BuildableShipWares.count == 0">
									<remove_value name="$Shipyards.{$i}" />
									<continue />
								</do_if>

								<set_value name="$FreeBuildModuleTable" exact="table[]" />
								<!--TODO @Owen use freebuildprocessors?-->
								<set_value name="$BuildModules" exact="$Shipyard.buildmodules" />
								<do_if value="$BuildModules.count">
									<set_value name="$QueuedBuilds" exact="$Shipyard.builds.queued" />
									<!--The queued builds are used to check what non-busy processors could soon be assigned to. Remove any non-ship construction builds or those which already have an assigned processor but not yet started.-->
									<do_all exact="$QueuedBuilds.count" counter="$j" reverse="true">
										<do_if value="not $QueuedBuilds.{$j}.isshipbuild or ($QueuedBuilds.{$j}.buildobject.exists and $QueuedBuilds.{$j}.buildprocessor)">
											<remove_value name="$QueuedBuilds.{$j}" />
										</do_if>
									</do_all>
									<do_all exact="$BuildModules.count" counter="$j">
										<find_object_component name="$FreeBuildProcessors" class="class.buildprocessor" busy="false" object="$BuildModules.{$j}" multiple="true" />
										<do_if value="$FreeBuildProcessors.count">
											<!--Go over the queued ship construction builds and see if this build module can accomodate one. If so, remove a processor as it is 'reserved' for a queued build.-->
											<do_all exact="$QueuedBuilds.count" counter="$k" reverse="true">
												<assert value="not $QueuedBuilds.{$k}.buildobject or $QueuedBuilds.{$k}.buildobject.state == componentstate.operational" text="'Queued build has a buildobject which is not operational: ' + $QueuedBuilds.{$k}.buildobject + ' ' + $QueuedBuilds.{$k}.buildobject.knownname + ' state: ' + $QueuedBuilds.{$k}.buildobject.state + ' Parent: ' + $QueuedBuilds.{$k}.buildobject.parent + ' [Owen]'" />
												<do_if value="($QueuedBuilds.{$k}.buildobject and $BuildModules.{$j}.dock.{$QueuedBuilds.{$k}.buildobject.docksize}) or ($QueuedBuilds.{$k}.macro and $BuildModules.{$j}.dock.{$QueuedBuilds.{$k}.macro.docksize})">
													<remove_value name="$FreeBuildProcessors.{1}" />
												</do_if>
												<do_if value="$FreeBuildProcessors.count == 0">
													<break />
												</do_if>
											</do_all>

											<do_if value="$FreeBuildProcessors.count">
												<set_value name="$FreeBuildModuleTable.{$BuildModules.{$j}}" operation="add" exact="$FreeBuildProcessors.count" />
											</do_if>
										</do_if>
									</do_all>
								</do_if>

								<do_if value="$FreeBuildModuleTable.keys.count">
									<debug_text text="$Faction.knownname + ' Shipyard: ' + $Shipyards.{$i} + ' ' + $Shipyards.{$i}.knownname + ' in ' + $Shipyards.{$i}.sector.knownname + ' has build modules with free processors: ' + $FreeBuildModuleTable" chance="global.$GB_Vault.$debug" />
									<set_value name="$ShipyardTable.{$Shipyard}" exact="table[]" />
									<set_value name="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable" exact="$FreeBuildModuleTable" />
									<set_value name="$ShipyardTable.{$Shipyard}.$BuildableShipWares" exact="$BuildableShipWares" />
								</do_if>
								<do_else>
									<debug_text text="$Faction.knownname + ' Ignoring shipyard: ' + $Shipyards.{$i} + ' ' + $Shipyards.{$i}.knownname + ' in ' + $Shipyards.{$i}.sector.knownname + ' as it does not have enough free build processors'" chance="global.$GB_Vault.$debug" />
									<remove_value name="$Shipyards.{$i}" />
								</do_else>
							</do_all>

							<remove_value name="$BuildProcessors" />
						</do_if>

						<do_if value="$Shipyards.count">
							<shuffle_list list="$ShipsToBuild" />

							<set_value name="$SelectedShips" exact="[]" />
							<set_value name="$ShipCostTable" exact="table[]" />
							<set_value name="$ShipyardPriceTables" exact="table[]" />
							<set_value name="$ShipyardDistanceTable" exact="table[]" />

							<set_value name="$JumpCheckRange" exact="8" comment="Maximum range where distance of shipyard is taken into account. Futher shipyards have the same distance score." />
							<do_all exact="$ShipsToBuild.count" counter="$i">
								<do_if value="$Shipyards.count == 0">
									<break />
								</do_if>

								<set_value name="$ShipToBuild" exact="$ShipsToBuild.{$i}" />
								<debug_text text="$Faction.knownname + ' wants to build ' + $ShipToBuild.macro" chance="global.$GB_Vault.$debug" />
								<do_if value="$i gt 40">
									<!--Early out. We have concidered enough ships for this round.-->
									<break />
								</do_if>

								<clear_table table="$ShipCostTable" />
								<clear_table table="$ShipyardDistanceTable" />
								<!--If the shipyard can build this ship, evaluate its suitability based on price and distance to job main zone-->
								<!--TODO @Owen optimisation. Don't do all of this if there's only one shipyard-->
								<do_all exact="$Shipyards.count" counter="$k">
									<set_value name="$Shipyard" exact="$Shipyards.{$k}" />
									<do_if value="$ShipyardTable.{$Shipyard}.$BuildableShipWares.indexof.{$ShipToBuild.macro.ware}">
										<set_value name="$HasSuitableBuildModule" exact="false" />
										<do_all exact="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.keys.count" counter="$o">
											<!--Check if the build module with a free processor has a suitable dock for this ship (don't need to check if the dock is free yet)-->
											<do_if value="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.keys.{$o}.dock.{$ShipToBuild.docksize}">
												<set_value name="$HasSuitableBuildModule" exact="true" />
												<break />
											</do_if>
										</do_all>
										<do_if value="$HasSuitableBuildModule">
											<do_if value="not $ShipyardPriceTables.{$Shipyard}?">
												<set_value name="$ShipyardPriceTables.{$Shipyard}" exact="$Shipyard.buildbuyprices" />
											</do_if>
											<get_object_value result="$ShipValue" object="$ShipToBuild" pricetable="$ShipyardPriceTables.{$Shipyard}" />
											<debug_text text="$ShipToBuild+' | '+$ShipValue" chance="global.$GB_Vault.$debug" />
											<set_value name="$ShipCostTable.{$Shipyard}" exact="$ShipValue" />
											<do_if value="not $ShipyardTable.{$Shipyard}.$DistanceTable?">
												<find_cluster_in_range distances="$ShipyardTable.{$Shipyard}.$DistanceTable" object="$Shipyard" maxdistance="$JumpCheckRange" multiple="true" />
											</do_if>

											<set_value name="$JobCluster" exact="@$ShipToBuild.jobcommander.cluster" />
											<do_if value="not $JobCluster">
												<set_value name="$JobCluster" exact="@$ShipToBuild.jobmainsector.cluster" />
											</do_if>
											<debug_text text="'JobCluster: '+$JobCluster.knownname" chance="global.$GB_Vault.$debug" />
											<do_if value="$JobCluster and $ShipyardTable.{$Shipyard}.$DistanceTable.{$JobCluster}? and $ShipyardTable.{$Shipyard}.$DistanceTable.{$JobCluster} ge 0">
												<set_value name="$ShipyardDistanceTable.{$Shipyard}" exact="$ShipyardTable.{$Shipyard}.$DistanceTable.{$JobCluster}" />
											</do_if>
											<do_elseif value="$Shipyard.gatedistance.{$JobCluster} ge 0">
												<!--Shipyard is a bit far. Don't exclude it but treat as a low chance.-->
												<set_value name="$ShipyardDistanceTable.{$Shipyard}" exact="$JumpCheckRange + 1" />
											</do_elseif>
											<!--Else: No path between the JobCluster and the shipyard. Disregard shipyard.-->
											<remove_value name="$JobCluster" />
										</do_if>
										<remove_value name="$HasSuitableBuildModule" />
									</do_if>
								</do_all>

								<!--Score the shipyards by how they rank in both price and range. Lower is better.-->
								<!--Note: Shipyards of the same distance / price may always be in the same order. The random selection of shipyard below should at least mitigate this a bit.-->
								<set_value name="$ScoredShipyardTable" exact="table[]" />
								<set_value name="$PriceOrder" exact="$ShipCostTable.keys.sorted" />
								<set_value name="$DistanceOrder" exact="$ShipyardDistanceTable.keys.sorted" />
								<debug_text text="'begin scoring: '+$PriceOrder.count+' | '+$DistanceOrder.count" chance="global.$GB_Vault.$debug" />
								<do_all exact="$PriceOrder.count" counter="$k">
									<do_if value="$DistanceOrder.indexof.{$PriceOrder.{$k}}">
										<debug_text text="$Faction.knownname + ' - Shipyard: ' + $PriceOrder.{$k} + ' ' + $PriceOrder.{$k}.knownname + ' has price rank of ' + $k + ' distance rank of ' + $DistanceOrder.indexof.{$PriceOrder.{$k}}" chance="global.$GB_Vault.$debug" />
										<set_value name="$ScoredShipyardTable.{$PriceOrder.{$k}}" exact="$k + $DistanceOrder.indexof.{$PriceOrder.{$k}}" />
									</do_if>
								</do_all>
								<debug_text text="'process scores: '+$ScoredShipyardTable.keys.count" chance="global.$GB_Vault.$debug" />
								<do_if value="$ScoredShipyardTable.keys.count">
									<set_value name="$SelectedShipyardIndex" min="1" max="$ScoredShipyardTable.keys.count" profile="decreasing" />
									<set_value name="$ScoreOrder" exact="$ScoredShipyardTable.keys.sorted" />
									<set_value name="$Shipyard" exact="$ScoreOrder.{$SelectedShipyardIndex}" />

									<add_build_to_construct_ship result="$Build" object="$Shipyard" buildobject="$ShipToBuild" faction="$Faction" price="if $Shipyard.isplayerowned then $ShipCostTable.{$Shipyard} else 0Cr" />
									<debug_text text="$Faction.knownname + ' Added build order ' + $Build + ' for ship ' + $ShipToBuild.knownname + ' (' + $ShipToBuild + ') on shipyard: ' + $Shipyard + ' in ' + $Shipyard.sector.knownname" chance="global.$GB_Vault.$debug" />

									<!--if shipyard is selected, reduce the count of processors and disregard if they get too low.-->
									<set_value name="$SuitableBuildModule" exact="false" />
									<do_all exact="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.keys.count" counter="$o">
										<do_if value="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.keys.{$o}.dock.{$ShipToBuild.docksize}">
											<set_value name="$SuitableBuildModule" exact="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.keys.{$o}" />
											<break />
										</do_if>
									</do_all>
									<assert value="$SuitableBuildModule" text="'Could not find a suitable build module while it should be guaranteed [Owen]'" />
									<do_if value="$SuitableBuildModule">
										<do_if value="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.{$SuitableBuildModule} == 1">
											<remove_value name="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.{$SuitableBuildModule}" />
											<debug_text text="'No more free processors on module ' + $SuitableBuildModule + ' ' + $SuitableBuildModule.knownname + '. Note, the builds are not assigned to the processors yet.'" chance="global.$GB_Vault.$debug" />
										</do_if>
										<do_else>
											<set_value name="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.{$SuitableBuildModule}" operation="subtract" />
											<debug_text text="'Build module ' + $SuitableBuildModule + ' ' + $SuitableBuildModule.knownname + ' has ' + $ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.{$SuitableBuildModule} + ' free processors left'" chance="global.$GB_Vault.$debug" />
										</do_else>
									</do_if>
									<remove_value name="$SuitableBuildModule" />

									<do_if value="$ShipyardTable.{$Shipyard}.$FreeBuildModuleTable.keys.count == 0">
										<debug_text text="'Shipyard ' + $Shipyard + ' ' + $Shipyard.knownname + ' has no more build modules with free processors. Removing from potential shipyard list.'" chance="global.$GB_Vault.$debug" />
										<remove_from_list name="$Shipyards" exact="$Shipyard" multiple="false" />
									</do_if>
								</do_if>
							</do_all>
						</do_if>
						<remove_value name="$ShipyardTable" />
						<remove_value name="$Shipyards" />
					</actions>
				</cue>

				<cue name="LoanPayment" instantiate="true" checkinterval="10s">
					<conditions>
						<check_age min="global.$GB_Vault.$NextPayment" />
					</conditions>
					<actions>
						<debug_text text="'LoanPayment: '+event.name" chance="global.$GB_Vault.$debug" />
						<set_value name="global.$GB_Vault.$NextPayment" exact="player.age + global.$GB_Vault.$PaymentInterval" />
						<do_for_each name="$Faction" in="global.$GB_Vault.$Accounts.keys.list">
							<set_value name="$Account" exact="global.$GB_Vault.$Accounts.{$Faction}" />
							<set_value name="$AccountBalance" exact="$Account.$balance" />
							<set_value name="$LoanBalance" exact="$Account.$loan_balance" />
							<set_value name="$PaymentsMissed" exact="$Account.$paymentsMissed" />
							<set_value name="$Payment" exact="$Account.$payment" />
							<do_if value="$Payment gt 0">
								<do_if value="$AccountBalance lt $Payment
									or
									(
										$Payment gt $LoanBalance
										and
										$AccountBalance lt $LoanBalance
									)">
									<show_help force="true" duration="8s"
										custom="'You have received a Priority Message from '+$Faction.name" position="20" />
									<set_value name="$Account.$arrears" operation="add" exact="$Payment" />
									<show_notification text="$Faction+' Not enough funds for loan payment.\nArrears: %,s'.[$Account.$arrears]+'Cr'" />
									<set_value name="$text" exact="'Your loan payment with '+$Faction.name+' failed due to not enough funds in your account.\n\n'+
										($Payment)/1+'Cr is past due. Please make a manual payment of '+$Account.$arrears+'Cr.'" />

									<set_value name="$Account.$paymentsMissed" operation="add" exact="1" />
									<do_if value="$PaymentsMissed == 5">
										<set_value name="$text" operation="add" exact="'\n\nYou have missed 5 payments. Thus, your collateral is now subject to confiscation.'" />
									</do_if>
									<do_elseif value="$PaymentsMissed gt 5">
										<set_value name="$text" operation="add" exact="'\n\nReminder: Your collateral is subject to confiscation.'" />
									</do_elseif>

									<show_help force="true" duration="8s"
										custom="'You have received a Priority Message from '+$Faction.name" position="20" />
									<write_incoming_message highpriority="true"
										source="$Faction.name"
										title="'Missed Loan Payment'"
										text="$text" />
									<add_faction_relation faction="$Faction" otherfaction="faction.player" value="-0.0005 * if $PaymentsMissed gt 5 then 5 else $PaymentsMissed" reason="relationchangereason.missionfailed" />
								</do_if>
								<do_else>
									<do_if value="$Payment ge $LoanBalance">
										<set_value name="$Account.$balance" operation="subtract" exact="$LoanBalance" />
										<set_value name="$Account.$loan_balance" exact="0" />
										<set_value name="$Account.$payment" exact="0" />
										<show_notification text="$Faction+' Loan Paid Off. Payment: %,s'.[$LoanBalance]+'Cr\nLoan Balance: %,s'.[$Account.$loan_balance]+'Cr\nAccount Balance: %,s'.[$Account.$balance]+'Cr'" />
									</do_if>
									<do_else>
										<set_value name="$Account.$balance" operation="subtract" exact="$Payment" />
										<set_value name="$Account.$loan_balance" operation="subtract" exact="$Payment" />
										<show_notification text="$Faction+' Loan Payment: %,s'.[$money]+'Cr\nLoan Balance: %,s'.[$Account.$loan_balance]+'Cr\nAccount Balance: %,s'.[$Account.$balance]+'Cr'" />
									</do_else>
								</do_else>
								<!-- full gain at 10m Cr -->
								<do_if value="$AccountBalance ge $Account.$maxRepCr*100">
									<!-- max 30 -->
									<do_if value="$Faction.relationto.{faction.player} lt 1">
										<add_faction_relation faction="$Faction" otherfaction="faction.player" value="$Account.$paymentRepRate" reason="relationchangereason.missioncompleted" />
									</do_if>
								</do_if>
								<do_elseif value="$AccountBalance ge $Account.$maxRepCr*10">
									<!-- max 25 -->
									<do_if value="$Faction.relationto.{faction.player} lt 0.32">
										<add_faction_relation faction="$Faction" otherfaction="faction.player" value="$Account.$paymentRepRate" reason="relationchangereason.missioncompleted" />
									</do_if>
								</do_elseif>
								<do_elseif value="$AccountBalance ge $Account.$maxRepCr">
									<!-- max 20 -->
									<do_if value="$Faction.relationto.{faction.player} lt 0.1">
										<add_faction_relation faction="$Faction" otherfaction="faction.player" value="$Account.$paymentRepRate" reason="relationchangereason.missioncompleted" />
									</do_if>
								</do_elseif>
								<do_elseif value="$AccountBalance gt 0">
									<!-- max 15 -->
									<do_if value="$Faction.relationto.{faction.player} lt 0.032">
										<add_faction_relation faction="$Faction" otherfaction="faction.player" value="$Account.$paymentRepRate * $AccountBalance / $Account.$maxRepCr" reason="relationchangereason.missioncompleted" />
									</do_if>
								</do_elseif>
							</do_if>
						</do_for_each>
					</actions>
				</cue>

				<!-- 
				$Accounts.{$Faction} = table[
					$balance = (int)ct,
					$loan_ammount = float,
					$interest_time = time,
					$collateral = [ships]
					$closed = bool,
					$relation = float,
					$inheritanceTax = float,

					- Lists -
					$fee = [float],
					$undockedFee = [float],
					$rate = [float],
					$period = [time],
					$loan_rate = [float],
					$loan_collateral_rate = [float],
				]
				-->
				<cue name="Bank_LoanMenu" instantiate="true">
					<conditions>
						<event_cue_signalled />
					</conditions>
					<delay exact="1ms" />
					<actions>
						<debug_text text="'Bank_LoanMenu: '+event.name" chance="global.$GB_Vault.$debug" />
						<!-- determine account -->
						<set_value name="$Faction" exact="event.param.trueowner" />
						<set_value name="$owner" exact="event.param.station.owner" />
						<set_value name="$docked" exact="true" />
						<do_if value="$owner == faction.bankingclan">
							<set_value name="$Title" exact="'InterGalactic Bank Loan Application'" />
							<set_value name="$vault" exact="true" />
						</do_if>
						<do_elseif value="@$MajorFactionList.{$owner}">
							<set_value name="$Faction" exact="faction.bankingclan" />
							<set_value name="$Title" exact="'InterGalactic Bank Loan Application'" />
							<set_value name="$vault" exact="false" />
						</do_elseif>
						<do_else>
							<set_value name="$Title" exact="$Faction+': Loan Application'" />
							<set_value name="$vault" exact="false" />
						</do_else>

						<!-- set cue variablse -->
						<set_value name="$Account" exact="$Accounts.{$Faction}" />
						<set_value name="$LoanAmount" exact="0" />
						<set_value name="$Rate" exact="$Account.$rate" />
						<set_value name="$Period" exact="$Account.$period" />
						<set_value name="$LoanRate" exact="$Account.$loan_rate" />
						<set_value name="$LoanCollateralRate" exact="$Account.$loan_collateral_rate" />
						<set_value name="$Collateral" exact="$Account.$collateral" />
						<set_value name="$Ships" exact="table[]" />
						<find_ship_by_true_owner name="$shipsXL" faction="faction.player" space="player.galaxy" multiple="true" class="class.ship_xl" />
						<do_if value="$Collateral.$XL.count gt 0">
							<do_for_each name="$ship" in="$Collateral.$XL" reverse="true">
								<do_if value="$shipsXL.indexof.{$ship}">
									<remove_from_list name="$shipsXL" exact="$ship" />
								</do_if>
								<do_else>
									<remove_from_list name="$Collateral.$XL" exact="$ship" />
								</do_else>
							</do_for_each>
						</do_if>
						<set_value name="$Ships.$XL" exact="$shipsXL" />
						<find_ship_by_true_owner name="$shipsL" faction="faction.player" space="player.galaxy" multiple="true" class="class.ship_l" />
						<do_if value="$Collateral.$L.count gt 0">
							<do_for_each name="$ship" in="$Collateral.$L" reverse="true">
								<do_if value="$shipsL.indexof.{$ship}">
									<remove_from_list name="$shipsL" exact="$ship" />
								</do_if>
								<do_else>
									<remove_from_list name="$Collateral.$L" exact="$ship" />
								</do_else>
							</do_for_each>
						</do_if>
						<set_value name="$Ships.$L" exact="$shipsL" />
						<find_ship_by_true_owner name="$shipsM" faction="faction.player" space="player.galaxy" multiple="true" class="class.ship_m" />
						<do_if value="$Collateral.$M.count gt 0">
							<do_for_each name="$ship" in="$Collateral.$M" reverse="true">
								<do_if value="$shipsM.indexof.{$ship}">
									<remove_from_list name="$shipsM" exact="$ship" />
								</do_if>
								<do_else>
									<remove_from_list name="$Collateral.$M" exact="$ship" />
								</do_else>
							</do_for_each>
						</do_if>
						<set_value name="$Ships.$M" exact="$shipsM" />
						<find_ship_by_true_owner name="$shipsS" faction="faction.player" space="player.galaxy" multiple="true" class="class.ship_s" />
						<do_if value="$Collateral.$S.count gt 0">
							<do_for_each name="$ship" in="$Collateral.$S" reverse="true">
								<do_if value="$shipsS.indexof.{$ship}">
									<remove_from_list name="$shipsS" exact="$ship" />
								</do_if>
								<do_else>
									<remove_from_list name="$Collateral.$S" exact="$ship" />
								</do_else>
							</do_for_each>
						</do_if>
						<set_value name="$Ships.$S" exact="$shipsS" />

						<!-- update interest -->
						<set_value name="$timeSinceInterest" exact="player.age - $Account.$interest_time" />
						<do_if value="$timeSinceInterest ge 1">
							<set_value name="$interest_amount" exact="$Account.$balance * ((1+$Rate)^($timeSinceInterest / $Period) - 1)" />
							<set_value name="$Account.$balance" operation="add" exact="$interest_amount" />
							<set_value name="$loanInterest_amount" exact="$Account.$loan_balance * ((1+$LoanRate)^($timeSinceInterest / $LoanInterestPeriod) - 1)" />
							<set_value name="$Account.$loan_balance" operation="add" exact="$loanInterest_amount" />
							<set_value name="$Account.$interest_time" exact="player.age" />
						</do_if>
						<signal_cue cue="Bank_LoanMenu_Open" />
					</actions>
					<cues>
						<cue name="Bank_LoanMenu_Open" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<delay exact="1ms" />
							<actions>
								<set_value name="$Account.$collateral_value" exact="0" />
								<do_for_each name="$table" in="$Account.$collateral">
									<do_for_each name="$ship" in="$Account.$collateral.{$table}">
										<set_value name="$Account.$collateral_value" operation="add" exact="($ship.macro.ware.averageprice/100)f*$LoanCollateralRate" />
									</do_for_each>
								</do_for_each>
								<debug_text text="'Bank_LoanMenu_Open: '+event.name" chance="global.$GB_Vault.$debug" />
								<set_value name="$LoanAmount" exact="0" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Create_Menu" param="table[
									$id = 'bank_loanmenu',
									$columns = 2,
									$title = $Title,
									$height = 400,
									$width = 595
								]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Call_Table_Method" param="table[$method='setColWidth', $col=1, $width=474]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Call_Table_Method" param="table[$method='setColWidth', $col=2, $width=119]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
									$col=1,
									$colSpan=2,
									$halign='center',
									$text=$LoanRate * 100 + '% interest per ' + $LoanInterestPeriod / 60 / 60 + ' hours. Payment: 2% of loan every 30min.'
								]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
									$col=1,
									$colSpan=2,
									$halign='center',
									$text='Loan Balance: %,s'.[($Account.$loan_balance)/1]+'Cr'
								]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
									$col=1,
									$colSpan=2,
									$halign='center',
									$text='Collateral Value: %,s'.[$Account.$collateral_value]+'Cr'
								]" />
								<!-- current collateral -->
								<do_if value="$Collateral.$XL.count gt 0 or $Collateral.$L.count gt 0 or $Collateral.$M.count gt 0  or $Collateral.$S.count gt 0 ">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[$col=1, $text='']" />
									<do_if value="$Collateral.$XL.count gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
											$col=1,
											$colSpan=2,
											$halign='center',
											$text='XL Collateral'
										]" />
										<do_for_each name="$ship" in="$Collateral.$XL">
											<set_value name="$value" exact="($ship.macro.ware.averageprice)f" />
											<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
											<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
												$col=1,
												$halign='left',
												$text=$ship.name+': %,s'.[($value/100)f * $LoanCollateralRate]+'Cr'
											]" />
											<do_if value="$Account.$loan_balance lt 1 or $Account.$loan_balance lt ($Account.$collateral_value - $value/100*$LoanCollateralRate)">
												<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
													$id = $ship,
													$col = 2,
													$text = table[$text='Remove'],
													$onClick = Bank_LoanMenu_Remove_Collateral
											]" />
											</do_if>
										</do_for_each>
									</do_if>
									<do_if value="$Collateral.$L.count gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
											$col=1,
											$colSpan=2,
											$halign='center',
											$text='L Collateral'
										]" />
										<do_for_each name="$ship" in="$Collateral.$L">
											<set_value name="$value" exact="($ship.macro.ware.averageprice)f" />
											<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
											<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
												$col=1,
												$halign='left',
												$text=$ship.name+': %,s'.[($value/100)f * $LoanCollateralRate]+'Cr'
											]" />
											<do_if value="$Account.$loan_balance lt 1 or $Account.$loan_balance lt ($Account.$collateral_value - $value/100*$LoanCollateralRate)">
												<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
													$id = $ship,
													$col = 2,
													$text = table[$text='Remove'],
													$onClick = Bank_LoanMenu_Remove_Collateral
											]" />
											</do_if>
										</do_for_each>
									</do_if>
									<do_if value="$Collateral.$M.count gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
											$col=1,
											$colSpan=2,
											$halign='center',
											$text='M Collateral'
										]" />
										<do_for_each name="$ship" in="$Collateral.$M">
											<set_value name="$value" exact="($ship.macro.ware.averageprice)f" />
											<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
											<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
												$col=1,
												$halign='left',
												$text=$ship.name+': %,s'.[($value/100)f * $LoanCollateralRate]+'Cr'
											]" />
											<do_if value="$Account.$loan_balance lt 1 or $Account.$loan_balance lt ($Account.$collateral_value - $value/100*$LoanCollateralRate)">
												<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
													$id = $ship,
													$col = 2,
													$text = table[$text='Remove'],
													$onClick = Bank_LoanMenu_Remove_Collateral
											]" />
											</do_if>
										</do_for_each>
									</do_if>
									<do_if value="$Collateral.$S.count gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
											$col=1,
											$colSpan=2,
											$halign='center',
											$text='S Collateral'
										]" />
										<do_for_each name="$ship" in="$Collateral.$S">
											<set_value name="$value" exact="($ship.macro.ware.averageprice)f" />
											<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
											<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
												$col=1,
												$halign='left',
												$text=$ship.name+': %,s'.[($value/100)f * $LoanCollateralRate]+'Cr'
											]" />
											<do_if value="$Account.$loan_balance lt 1 or $Account.$loan_balance lt ($Account.$collateral_value - $value/100*$LoanCollateralRate)">
												<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
													$id = $ship,
													$col = 2,
													$text = table[$text='Remove'],
													$onClick = Bank_LoanMenu_Remove_Collateral
											]" />
											</do_if>
										</do_for_each>
									</do_if>
								</do_if>
								<!-- can't collateral your last ship -->
								<do_if value="$shipsXL.count + $shipsL.count + $shipsM.count + $shipsS.count lt 2">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[$col=1, $text='']" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$colSpan=2,
										$halign='center',
										$text='Cannot use all ships for collateral.'
									]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[$col=1, $text='']" />
								</do_if>
								<do_else>
									<!-- add collateral -->
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[$col=1, $text='']" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$colSpan=2,
										$halign='center',
										$text='Add Collateral'
									]" />
									<do_if value="$shipsXL.count gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
											$id = 'XL',
											$col = 1,
											$colSpan = 2,
											$width = 100,
											$text = table[$text='Add XL Ships'],
											$onClick = Bank_LoanMenu_Find_Collateral
										]" />
									</do_if>
									<do_if value="$shipsL.count gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
											$id = 'L',
											$col = 1,
											$colSpan = 2,
											$width = 100,
											$text = table[$text='Add L Ships'],
											$onClick = Bank_LoanMenu_Find_Collateral
										]" />
									</do_if>
									<do_if value="$shipsM.count gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
											$id = 'M',
											$col = 1,
											$colSpan = 2,
											$width = 100,
											$text = table[$text='Add M Ships'],
											$onClick = Bank_LoanMenu_Find_Collateral
										]" />
									</do_if>
									<do_if value="$shipsS.count gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
											$id = 'S',
											$col = 1,
											$colSpan = 2,
											$width = 100,
											$text = table[$text='Add S Ships'],
											$onClick = Bank_LoanMenu_Find_Collateral
										]" />
									</do_if>
								</do_else>
								<!-- make loan -->
								<debug_text text="'make loan: '+$Collateral.$XL.count+' | '+$Collateral.$L.count+' | '+$Collateral.$M.count+' | '+$Collateral.$S.count +' | '+$Account.$collateral_value+' | '+$LoanCollateralRate+' | '+$Account.$loan_balance" chance="global.$GB_Vault.$debug" />
								<do_if value="$Collateral.$XL.count + $Collateral.$L.count + $Collateral.$M.count + $Collateral.$S.count gt 0 and $Account.$collateral_value - $Account.$loan_balance gt 0">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[$col=1, $text='']" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[$col=1, $text='Select Loan Amount:']" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Slider" param="table[
										$id = 'sliderPayment',
										$start = 0,
										$col = 1,
										$text = table[$text=''],
										$min = 0, $max = ($Account.$collateral_value - $Account.$loan_balance)/1, $step = 1, $suffix='Cr',
										$default = 0,
										$onSliderCellChanged = Bank_LoanMenu_Loan_Amount
									]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
										$col = 2,
										$text = table[$text='Accept'],
										$onClick = Bank_LoanMenu_Issue_Loan
									]" />
								</do_if>
							</actions>
						</cue>

						<!-- submenu -->
						<cue name="Bank_LoanMenu_Find_Collateral" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<delay exact="1ms" />
							<actions>
								<set_value name="$checked" exact="table[]" />
								<debug_text text="'Bank_LoanMenu_Find_Collateral: '+event.name" chance="global.$GB_Vault.$debug" />
								<set_value name="$size" exact="event.param.$id" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Close_Menu" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Create_Menu" param="table[
									$id = 'bank_loanmenu_collateral',
									$columns = 2,
									$title = 'Add '+$size+' Collateral',
									$height = 400,
									$width = 595
								]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Call_Table_Method" param="table[$method='setColWidth', $col=1, $width=474]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Call_Table_Method" param="table[$method='setColWidth', $col=2, $width=119]" />
								<do_for_each name="$ship" in="$Ships.{'$'+$size}">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$halign='left',
										$text=$ship.name+': %,s'.[($ship.macro.ware.averageprice/100)f * $LoanCollateralRate]+'Cr'
									]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_CheckBox" param="table[
										$id = $ship,
                    $checked = @$checked.{$ship},
                    $col = 2,
                    $width = 20,
                    $text = table[$text=''],
                    $onClick = Bank_LoanMenu_Check_Collateral
                  ]" />
								</do_for_each>
								<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
										$col = 2,
										$text = table[$text='Add'],
										$onClick = Bank_LoanMenu_Add_Collateral
									]" />
							</actions>
							<cues>
								<!-- checkbox -->
								<cue name="Bank_LoanMenu_Check_Collateral" instantiate="true">
									<conditions>
										<event_cue_signalled />
									</conditions>
									<actions>
										<debug_text text="'Bank_LoanMenu_Check_Collateral: '+event.name" chance="global.$GB_Vault.$debug" />
										<set_value name="$checked.{event.param.$id}" exact="event.param.$checked" />
										<cancel_cue cue="this" />
									</actions>
								</cue>
								<!-- buttons -->
								<cue name="Bank_LoanMenu_Add_Collateral" instantiate="true">
									<conditions>
										<event_cue_signalled />
									</conditions>
									<actions>
										<debug_text text="'Bank_LoanMenu_Add_Collateral: '+event.name" chance="global.$GB_Vault.$debug" />
										<do_for_each name="$ship" in="$checked">
											<do_if value="$checked.{$ship}">
												<set_value name="$class" exact="$ship.class" />
												<do_if value="$class == class.ship_xl">
													<append_to_list name="$Collateral.$XL" exact="$ship" />
													<remove_from_list name="$shipsXL" exact="$ship" />
												</do_if>
												<do_elseif value="$class == class.ship_l">
													<append_to_list name="$Collateral.$L" exact="$ship" />
													<remove_from_list name="$shipsL" exact="$ship" />
												</do_elseif>
												<do_elseif value="$class == class.ship_m">
													<append_to_list name="$Collateral.$M" exact="$ship" />
													<remove_from_list name="$shipsM" exact="$ship" />
												</do_elseif>
												<do_else>
													<append_to_list name="$Collateral.$S" exact="$ship" />
													<remove_from_list name="$shipsS" exact="$ship" />
												</do_else>
												<set_value name="$Account.$collateral_value" operation="add" exact="($ship.macro.ware.averageprice/100)f * $LoanCollateralRate" />
											</do_if>
										</do_for_each>
										<signal_cue_instantly cue="md.Simple_Menu_API.Close_Menu" />
										<signal_cue_instantly cue="Bank_LoanMenu_Open" />
									</actions>
								</cue>
							</cues>
						</cue>
						<cue name="Bank_LoanMenu_Remove_Collateral" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<actions>
								<debug_text text="'Bank_LoanMenu_Remove_Collateral: '+event.name" chance="global.$GB_Vault.$debug" />
								<set_value name="$ship" exact="event.param.$id" />
								<set_value name="$class" exact="$ship.class" />
								<do_if value="$class == class.ship_xl">
									<remove_from_list name="$Collateral.$XL" exact="$ship" />
									<append_to_list name="$shipsXL" exact="$ship" />
								</do_if>
								<do_elseif value="$class == class.ship_l">
									<remove_from_list name="$Collateral.$L" exact="$ship" />
									<append_to_list name="$shipsL" exact="$ship" />
								</do_elseif>
								<do_elseif value="$class == class.ship_m">
									<remove_from_list name="$Collateral.$M" exact="$ship" />
									<append_to_list name="$shipsM" exact="$ship" />
								</do_elseif>
								<do_else>
									<remove_from_list name="$Collateral.$S" exact="$ship" />
									<append_to_list name="$shipsS" exact="$ship" />
								</do_else>
								<set_value name="$Account.$collateral_value" operation="subtract" exact="($ship.macro.ware.averageprice/100)f * $LoanCollateralRate" />
								<do_if value="$Account.$collateral_value lt 0 or ($Collateral.$S.count == 0 and $Collateral.$M.count == 0 and $Collateral.$L.count == 0 and $Collateral.$XL.count == 0)">
									<set_value name="$Account.$collateral_value" exact="0" />
								</do_if>
								<signal_cue_instantly cue="md.Simple_Menu_API.Close_Menu" />
								<signal_cue_instantly cue="Bank_LoanMenu_Open" />
							</actions>
						</cue>

						<!-- sliders -->
						<cue name="Bank_LoanMenu_Loan_Amount" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<actions>
								<debug_text text="'Bank_LoanMenu_Loan_Amount: '+event.name" chance="global.$GB_Vault.$debug" />
								<set_value name="$LoanAmount" exact="event.param.$value" />
								<cancel_cue cue="this" />
							</actions>
						</cue>

						<!-- actions -->
						<cue name="Bank_LoanMenu_Issue_Loan" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<actions>
								<debug_text text="'Bank_LoanMenu_Issue_Loan: '+event.name" chance="global.$GB_Vault.$debug" />
								<!-- update interest -->
								<set_value name="$interest_amount" exact="$Account.$balance * ((1+$Rate)^($timeSinceInterest / $Period) - 1)" />
								<set_value name="$Account.$balance" operation="add" exact="$interest_amount" />
								<debug_text text="'issue loan: '+$Account.$collateral_value+' minus '+$Account.$loan_balance+' equals '+$Account.$collateral_value * $LoanCollateralRate - $Account.$loan_balance+' ge '+$LoanAmount" chance="global.$GB_Vault.$debug" />
								<do_if value="$Account.$collateral_value - $Account.$loan_balance ge $LoanAmount">
									<signal_cue_instantly cue="Transfer" param="table[$Faction = $Faction, $money = ($LoanAmount)Cr, $message='New Loan']" />
									<set_value name="$loanInterest_amount" exact="$Account.$loan_balance * ((1+$LoanRate)^($timeSinceInterest / $LoanInterestPeriod) - 1)" />
									<set_value name="$Account.$loan_balance" operation="add" exact="$loanInterest_amount+$LoanAmount" />
									<set_value name="$Account.$interest_time" exact="player.age" />
									<set_value name="$newPayment" exact="$LoanAmount / 50" /> <!-- payment = 2% -->
									<set_value name="$Account.$payment" operation="add" exact="$newPayment" />
									<set_value name="$newLoanText" exact="'New Loan Amount: %,s'.[$LoanAmount]+'Cr\nPayment: %,s'.[($newPayment)/1]+'Cr\n Your payment is automatically deducted from your account every '+$PaymentInterval/60+' minutes.'" />
									<do_if value="$Account.$payment gt $newPayment">
										<set_value name="$newLoanText" operation="add" exact="'\n\nCurrent Loan Balance: %,s'.[$Account.$loan_balance/1]+'Cr\nTotal Payment: %,s'.[($Account.$payment)/1]+'Cr'" />
									</do_if>
									<show_help force="true" duration="8s"
										custom="'You have received a Priority Message from '+$Faction.name" position="20" />
									<write_incoming_message highpriority="true" source="$Faction.name" title="'New loan'" text="$newLoanText" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Close_Menu" />
								</do_if>
								<do_else>
									<set_value name="$loanInterest_amount" exact="$Account.$loan_balance * ((1+$LoanRate)^($timeSinceInterest / $LoanInterestPeriod) - 1)" />
									<set_value name="$Account.$loan_balance" operation="add" exact="$loanInterest_amount" />
									<set_value name="$Account.$interest_time" exact="player.age" />
									<cancel_cue cue="this" />
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>

				<!-- api -->
				<!-- param: table[
					$Faction = faction.factionid,
					$money = ()Cr,
					$message = string
				] -->
				<!-- positive money is deposit, negative is withdrawal -->
				<cue name="Transfer">
					<conditions>
						<event_cue_signalled />
					</conditions>
					<actions>
						<debug_text text="'Transfer: '+event.name" chance="global.$GB_Vault.$debug" />
						<do_if value="@event.param.$message">
							<set_value name="$message" exact="event.param.$message" />
						</do_if>
						<do_else>
							<set_value name="$message" exact="null" />
						</do_else>
						<set_value name="$Faction" exact="event.param.$Faction" />
						<do_if value="$Faction.hastag.{tag.economic}">
							<do_if value="not $Accounts.keys.list.indexof.{$Faction}">
								<set_value name="$Faction" exact="faction.bankingclan" />
							</do_if>
							<set_value name="$Account" exact="$Accounts.{$Faction}" />
							<set_value name="$AccountBalance" exact="$Account.$balance" />
							<set_value name="$LoanBalance" exact="$Account.$loan_balance" />
							<do_if value="$AccountBalance == 0 and $LoanBalance == 0">
								<set_value name="$Account.$interest_time" exact="player.age" />
							</do_if>
							<do_else>
								<set_value name="$timeSinceInterest" exact="player.age - $Account.$interest_time" />
								<set_value name="$Account.$interest_time" exact="player.age" />
								<set_value name="$interest_amount" exact="$AccountBalance * ((1+$Account.$rate)^($timeSinceInterest / $Account.$period) - 1)" />
								<set_value name="$loanInterest_amount" exact="$LoanBalance * ((1+$LoanRate)^($timeSinceInterest / $LoanInterestPeriod) - 1)" />
								<set_value name="$Account.$loan_balance" operation="add" exact="$loanInterest_amount" />
								<set_value name="$Account.$balance" operation="add" exact="$interest_amount" />
							</do_else>
							<set_value name="$money" exact="event.param.$money" />
							<set_value name="$Account.$balance" operation="add" exact="($money)f/100" />
							<do_if value="$money > 0">
								<set_value name="$text" exact="$Faction+' Deposit: %,s'.[($money)f/100]+'Cr\nBalance: %,s'.[$Account.$balance]+'Cr'" />
							</do_if>
							<do_else>
								<set_value name="$text" exact="$Faction+' Withdrawal: %,s'.[($money)f/100]+'Cr\nBalance: %,s'.[$Account.$balance]+'Cr'" />
							</do_else>
							<do_if value="not ($message == null)">
								<set_value name="$text" exact="$text+'\n'+$message" />
							</do_if>
							<show_notification text="$text" />
						</do_if>
						<!-- catch all for civilian, criminal, smuggler, etc factions -->
						<do_else>
							<reward_player money="$money" />
						</do_else>
						<reset_cue cue="this" />
					</actions>
				</cue>

				<!-- ui open lootbox interaction button -->
				<cue name="Vault_LootboxInteractMenu">
					<conditions>
						<event_cue_signalled cue="md.Interact_Menu_API.Get_Actions" />
						<check_any>
							<check_value value="player.entity.inventory.{ware.inv_bank_lootbox}.exists" />
							<check_value value="player.entity.inventory.{ware.inv_bank_lootbox_fused}.exists" />
							<check_value value="@player.ship.cargo.{ware.bank_large_lootbox}.exists" />
							<check_value value="@player.ship.cargo.{ware.bank_large_lootbox_fused}.exists" />
							<check_value value="@player.station.cargo.{ware.bank_large_lootbox}.exists and @player.station.owner == faction.player" />
							<check_value value="@player.station.cargo.{ware.bank_large_lootbox_fused}.exists and @player.station.owner == faction.player" />
						</check_any>
					</conditions>
					<actions>
						<debug_text text="'Vault_LootboxInteractMenu: '+event.name" chance="global.$GB_Vault.$debug" />
						<signal_cue_instantly cue="md.Interact_Menu_API.Add_Action" param="table[
							$id = 'Vault_LootboxMenu',
							$section = 'hacking_menu',
							$text = 'Access Lootbox',
							$icon = 'menu_swi_credits',
							$callback = Lootbox_Menu,
							$echo = table[$Faction = event.param.$object.owner]
						]" />
						<reset_cue cue="this" />
					</actions>
				</cue>

				<cue name="Lootbox_Menu" instantiate="true">
					<conditions>
						<event_cue_signalled />
					</conditions>
					<delay exact="1ms" />
					<actions>
						<debug_text text="'Lootbox_Menu: '+event.name" chance="global.$GB_Vault.$debug" />
						<set_value name="$Bypasses" exact="0" />
						<set_value name="$Lootboxes" exact="0" />
						<set_value name="$LargeLootboxes" exact="0" />
						<set_value name="$LootboxesFused" exact="0" />
						<set_value name="$LargeLootboxesFused" exact="0" />
						<set_value name="$UseBypass" exact="true" />
						<set_value name="$inventory" exact="player.entity.inventory" />
						<do_if value="player.ship">
							<set_value name="$Ship" exact="player.ship" />
						</do_if>
						<do_elseif value="player.station and player.station.owner == faction.player">
							<set_value name="$Ship" exact="player.station" />
						</do_elseif>
						<!-- Bypasses available -->
						<do_if value="$inventory.{ware.inv_securitybypasssystem}.exists">
							<set_value name="$Bypasses" exact="$inventory.{ware.inv_securitybypasssystem}.count" />
						</do_if>
						<!-- Lootboxes -->
						<do_if value="$inventory.{ware.inv_bank_lootbox}.exists">
							<set_value name="$Lootboxes" exact="$inventory.{ware.inv_bank_lootbox}.count" />
						</do_if>
						<do_if value="$inventory.{ware.inv_bank_lootbox_fused}.exists">
							<set_value name="$Lootboxes" exact="$inventory.{ware.inv_bank_lootbox_fused}.count" />
						</do_if>
						<do_if value="@$Ship">
							<do_if value="$Ship.cargo.{ware.bank_large_lootbox}.exists">
								<set_value name="$LargeLootboxes" exact="$Ship.cargo.{ware.bank_large_lootbox}.count" />
							</do_if>
							<do_if value="$Ship.cargo.{ware.bank_large_lootbox_fused}.exists">
								<set_value name="$LargeLootboxes" exact="$Ship.cargo.{ware.bank_large_lootbox_fused}.count" />
							</do_if>
						</do_if>
						<signal_cue cue="Lootbox_Menu_Open" />
					</actions>
					<cues>
						<cue name="Lootbox_Menu_Open" instantiate="true">
							<conditions>
								<event_cue_signalled />
							</conditions>
							<delay exact="1ms" />
							<actions>
								<debug_text text="'Lootbox_Menu_Open: '+event.name" chance="global.$GB_Vault.$debug" />
								<!-- can't use bypass on fused boxes -->
								<do_if value="$Lootboxes == 0 and $LargeLootboxes == 0">
									<set_value name="$UseBypass" exact="false" />
								</do_if>
								<signal_cue_instantly cue="md.Simple_Menu_API.Create_Menu"
									param="table[
									$id = 'Lootbox_Menu',
									$columns = 2,
									$title = $Title,
									$height = 400,
									$width = 300
								]" />
								<!-- show lootbox warning label -->
								<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
								<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
									$colSpan=2,
									$color='Helper.color.red',
									$halign='center',
									$text={20777,1010}
								]" />
								<!-- show use bypass checkbox (Use Bypass: Checkbox -->
								<do_if value="$Bypasses gt 0">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" param="table[$interactive=false]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$halign='left',
										$text='Attempt Security Bypass?'
									]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_CheckBox" param="table[
                    $checked = $UseBypass,
                    $col = 2,
                    $width = 20,
                    $text = table[$text=''],
                    $onClick = UseBypassCheckbox
                  ]" />
								</do_if>
								<!-- show lootboxes (NxType: OpenButton) -->
								<do_if value="$Lootboxes gt 0">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$halign='left',
										$text=$Lootboxes+'x Lootbox'
									]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
										$id='Lootbox',
										$col = 2,
										$text = table[$text='Open One'],
										$onClick = OpenLootbox
									]" />
								</do_if>
								<do_if value="$LargeLootboxes gt 0">
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$col=1,
										$halign='left',
										$text=$LargeLootboxes+'x Large Lootbox'
									]" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
										$id='LargeLootbox',
										$col = 2,
										$text = table[$text='Open One'],
										$onClick = OpenLootbox
									]" />
								</do_if>
								<!-- fused boxes -->
								<do_if value="$LootboxesFused gt 0 or $LargeLootboxesFused gt 0">
									<!-- show fused lootbox warning -->
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[$text='']" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
									<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
										$colSpan=2,
										$color='Helper.color.red',
										$halign='center',
										$text={20777,1011}
									]" />
									<do_if value="$LootboxesFused gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
											$col=1,
											$halign='left',
											$text=$LootboxesFused+'x Fused Lootbox'
										]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
											$id='Fused',
											$col = 2,
											$text = table[$text='Force Open?'],
											$onClick = OpenLootbox
										]" />
									</do_if>
									<do_if value="$LargeLootboxesFused gt 0">
										<signal_cue_instantly cue="md.Simple_Menu_API.Add_Row" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Text" param="table[
											$col=1,
											$halign='left',
											$text=$LargeLootboxesFused+'x Fused Large Lootbox'
										]" />
										<signal_cue_instantly cue="md.Simple_Menu_API.Make_Button" param="table[
											$id='LargeFused',
											$col = 2,
											$text = table[$text='Force Open?'],
											$onClick = OpenLootbox
										]" />
									</do_if>
								</do_if>
							</actions>
							<cues>
								<!-- checkbox -->
								<cue name="UseBypassCheckbox" instantiate="true">
									<conditions>
										<event_cue_signalled />
									</conditions>
									<actions>
										<debug_text text="'UseBypassCheckbox: '+event.name" chance="global.$GB_Vault.$debug" />
										<set_value name="$UseBypass" exact="event.param.$value" />
										<cancel_cue cue="this" />
									</actions>
								</cue>

								<!-- actions -->
								<cue name="OpenLootbox" instantiate="true">
									<conditions>
										<event_cue_signalled />
									</conditions>
									<actions>
										<debug_text text="'OpenLootbox: '+event.name" chance="global.$GB_Vault.$debug" />
										<set_value name="$id" exact="event.param.$id" />
										<set_value name="$bomb" exact="true" chance="5" />
										<set_value name="$roll" min="1" max="20" />
										<!-- bypass used? -->
										<do_if value="$UseBypass">
											<remove_inventory ware="ware.inv_securitybypasssystem" />
											<set_value name="$Bypasses" operation="subtract" exact="1" />
											<!-- 50% success -->
											<do_if value="$roll lt 11">
												<set_value name="$bypassFail" exact="true" />
											</do_if>
											<!-- critinal fail -->
											<do_elseif value="$roll == 1">
												<set_value name="$criticalFail" exact="true" />
												<do_if value="$id == 'Lootbox'">
													<remove_inventory ware="ware.inv_bank_lootbox" />
													<add_inventory ware="ware.inv_bank_lootbox_fused" />
													<set_value name="$Lootboxes" operation="subtract" exact="1" />
													<set_value name="$LootboxesFused" operation="add" exact="1" />
													<set_value name="$size" exact="1" />
												</do_if>
												<do_else>
													<remove_cargo object="$Ship" ware="ware.bank_large_lootbox" exact="1" />
													<add_cargo object="$Ship" ware="ware.bank_large_lootbox_fused" exact="1" />
													<set_value name="$LargeLootboxes" operation="subtract" exact="1" />
													<set_value name="$LargeLootboxesFused" operation="add" exact="1" />
													<set_value name="$size" exact="2" />
												</do_else>
											</do_elseif>
											<!-- successful bypass -->
											<do_else>
												<set_value name="$bypassed" exact="true" />
											</do_else>
										</do_if>
										<!-- Open it, unless bypass failed -->
										<!-- reward the credits -->
										<do_if value="not @$bypassFail">
											<do_if value="not @$bomb">
												<do_if value="$id == 'Lootbox' or $id == 'Fused'">
													<do_if value="$id == 'Lootbox'">
														<remove_inventory ware="ware.inv_bank_lootbox" />
														<set_value name="$Lootboxes" operation="subtract" exact="1" />
													</do_if>
													<do_else>
														<remove_inventory ware="ware.inv_bank_lootbox_fused" />
														<set_value name="$LootboxesFused" operation="subtract" exact="1" />
													</do_else>
													<do_if value="not @$bomb">
														<set_value name="$reward" exact="50000" chance="10" />
														<do_if value="not @$reward">
															<set_value name="$reward" min='1000' max='50000' />
														</do_if>
													</do_if>
													<set_value name="$size" exact="1" />
												</do_if>
												<do_else>
													<do_if value="$id == 'LargeLootbox'">
														<remove_cargo object="$ship" ware="ware.bank_large_lootbox" exact="1" />
														<set_value name="$LargeLootboxes" operation="subtract" exact="1" />
													</do_if>
													<do_else>
														<remove_cargo object="$ship" ware="ware.bank_large_lootbox_fused" exact="1" />
														<set_value name="$LargeLootboxesFused" operation="subtract" exact="1" />
													</do_else>
													<set_value name="$reward" exact="1000000" chance="10" />
													<do_if value="not @$reward">
														<set_value name="$reward" min='20000' max='1000000' />
													</do_if>
													<set_value name="$size" exact="2" />
												</do_else>
												<!-- 50% chance lootbox hacks and broadcasts player's identity to banking clan -->
												<do_if value="not $bypassed and $size == 1" chance="50">
													<add_faction_relation faction="faction.bankingclan" otherfaction="faction.player" value="-0.0032" reason="relationchangereason.hackingdiscovered" />
													<show_notification text="'{20777,2023} {20777,2022}: %,s'.[$reward]+'Cr'" />
												</do_if>
												<do_elseif value="not $bypassed and $size== 2" chance="50">
													<add_faction_relation faction="faction.bankingclan" otherfaction="faction.player" value="-0.01" reason="relationchangereason.hackingdiscovered" />
													<show_notification text="'{20777,2023} {20777,2022}: %,s'.[$reward]+'Cr'" />
												</do_elseif>
												<!-- Success -->
												<do_else>
													<show_notification text="'{20777,2022}: %,s'.[$reward]+'Cr'" />
												</do_else>
												<reward_player money="$reward" />
											</do_if>
											<!-- bomb -->
											<do_else>
												<do_if value="$UseBypass">
													<do_if value="$id == 'Lootbox'">
														<remove_inventory ware="ware.inv_bank_lootbox" />
														<set_value name="$Lootboxes" operation="subtract" exact="1" />
														<set_value name="$bombs" exact="1" />
													</do_if>
													<do_else>
														<remove_cargo object="$Ship" ware="ware.bank_large_lootbox" exact="1" />
														<set_value name="$LargeLootboxes" operation="subtract" exact="1" />
														<set_value name="$bombs" exact="5" />
													</do_else>
													<add_inventory ware="ware.bomb_player_limpet_mine_01_mk1" exact="$bombs" />
													<show_notification text="'{20777,1018} '+$bombs+'x {20777,1019}'" />
												</do_if>
												<!-- boom -->
												<do_elseif value="not $UseBypass">
													<!-- if ATD then kill player -->
													<do_if value="@md.kuertee_atd.kATD.exists">
														<signal_cue_instantly cue="md.kuertee_atd.kATD.PlayerDeath" param="table[$ship = $Ship, $attackerFaction = $attackerFaction, $isSaveShip = true]" />
													</do_if>
													<!-- if large then destroy ship, damage station -->
													<do_if value="$id == 'LargeLootbox' or $id == 'LargeFused'">
														<do_if value="$Ship.isclass.ship">
															<destroy_object object="$Ship" explosion="true" />
														</do_if>
														<do_else>
															<find_module waretransport="waretransport.container" name="$module" functional="true" object="$Ship" />
														</do_else>
														<destroy_object object="$module" explosion="true" />
													</do_if>
													<signal_cue_instantly cue="md.Simple_Menu_API.Close_Menu" />
												</do_elseif>
											</do_else>
										</do_if>
										<do_else>
											<!-- show bypass failed message -->
											<do_if value="$criticalFail">
												<do_if value="not $bypassed and $size == 1" chance="50">
													<add_faction_relation faction="faction.bankingclan" otherfaction="faction.player" value="-0.0032" reason="relationchangereason.hackingdiscovered" />
												</do_if>
												<do_elseif value="not $bypassed and $size== 2" chance="50">
													<add_faction_relation faction="faction.bankingclan" otherfaction="faction.player" value="-0.01" reason="relationchangereason.hackingdiscovered" />
												</do_elseif>
												<show_notification text="{20777,1021}" />
											</do_if>
											<do_else>
												<show_notification text="{20777,1020}" />
											</do_else>
										</do_else>
										<signal_cue_instantly cue="md.Simple_Menu_API.Close_Menu" />
										<signal_cue_instantly cue="Lootbox_Menu_Open" />
									</actions>
								</cue>
							</cues>
						</cue>
					</cues>
				</cue>

				<!-- unused -->
				<!-- <cue name="SpawnLargeLootBox">
					<conditions>
						<check_any>
							<event_cue_signalled />
							<!-check for destroyed vault component->
						</check_any>
					</conditions>
					<delay exact="2s" />
					<actions>
						<debug_text text="'SpawnLargeLootBox: '+event.name" chance="global.$GB_Vault.$debug" />
						<do_all exact="[2,4,6].random">
							<set_value name="$RandomMultiplier" exact="[1.4, 1.5, 1.6, 1.8, 1.9, 2.0, 2.1, 2.2, 2.4, 2.6].random" />
							<do_any>
								<do_all>
									<create_position name="$TargetOffset" space="event.object.sector" object="event.object" />
									<set_value name="$TargetVelocityX" exact="-200 * $RandomMultiplier" />
									<set_value name="$TargetVelocityY" exact="0" />
									<set_value name="$TargetVelocityZ" exact="0" />
								</do_all>
								<do_all>
									<create_position name="$TargetOffset" space="event.object.sector" object="event.object" />
									<set_value name="$TargetVelocityX" exact="-200 * $RandomMultiplier" />
									<set_value name="$TargetVelocityY" exact="0" />
									<set_value name="$TargetVelocityZ" exact="-200 * $RandomMultiplier" />
								</do_all>
								<do_all>
									<create_position name="$TargetOffset" space="event.object.sector" object="event.object" />
									<set_value name="$TargetVelocityX" exact="200 * $RandomMultiplier" />
									<set_value name="$TargetVelocityY" exact="0" />
									<set_value name="$TargetVelocityZ" exact="0" />
								</do_all>
							</do_any>
							<set_value name="$Pitch" min="0" max="360" />
							<set_value name="$Yaw" min="0" max="360" />
							<set_value name="$Roll" min="0" max="360" />
							<create_object name="$lootbox" sector="event.object.sector" macro="macro.bank_wares_macro">
								<position value="$TargetOffset" />
								<rotation pitch="($Pitch)deg" yaw="($Yaw)deg" roll="($Roll)deg" />
							</create_object>
							<add_object_velocity object="$lootbox">
								<linear x="$TargetVelocityX" y="$TargetVelocityY" z="$TargetVelocityZ" />
							</add_object_velocity>
							<add_cargo object="$lootbox" ware="ware.bank_large_lootbox" exact="[1,2,3].random" />
						</do_all>
						<reset_cue cue="this" />
					</actions>
				</cue> -->

				<cue name="K_ArriveAndLeaveStations" namespace="this">
					<actions>
						<debug_text text="'K_ArriveAndLeaveStations: '+event.name" chance="global.$GB_Vault.$debug" />
						<set_value name="$attentionNearbyAndNearer" exact="[attention.nearby, attention.adjacentroom, attention.inroom]" />
						<set_value name="$attentionInZoneAndNearer" exact="[attention.inzone, attention.nearby, attention.adjacentroom, attention.inroom]" />
						<set_value name="md.Notifications.Init.$kuertee_station_new" exact="null" />
						<set_value name="md.Notifications.Init.$kuertee_station_old" exact="null" />
						<set_value name="md.Notifications.Init.$kuertee_station_current" exact="null" />
						<set_value name="md.Notifications.Init.$kuertee_Cue_departOldStation" exact="null" />
						<set_value name="md.Notifications.Init.$kuertee_debug" exact="0" />
					</actions>
					<cues>
						<cue name="K_ArriveStation" instantiate="true">
							<conditions>
								<check_any>
									<event_cue_signalled />
									<check_all>
										<!-- Event for the specified object changing attention level (object = attention changing object, param = new attention level, param2 = previous attention level) -->
										<event_object_changed_attention group="md.NPC_Instantiation.Instantiation.$TrackedObjects" />
										<check_value value="event.object.isclass.station" />
										<check_value value="@event.object.macro != @macro.landmarks_par_monument_01_macro" />
										<check_value value="@event.object.macro != @macro.torus_maze_macro" />
									</check_all>
									<check_all>
										<!-- Event for when the player successfully teleports. (param = new room, param2 = old room, param3 = is shortcut instead of real teleport) -->
										<event_player_teleport_successful />
									</check_all>
								</check_any>
							</conditions>
							<actions>
								<debug_text text="'K_ArriveStation: '+event.name" chance="global.$GB_Vault.$debug" />
								<set_value name="$isOk" exact="false" />
								<set_value name="$isAlreadyActive" exact="false" />
								<set_value name="$isTeleport" exact="false" />
								<do_if value="event.name == 'event_cue_signalled'">
									<set_value name="$station_this" exact="event.param.$station" />
									<set_value name="$isAlreadyActive" exact="event.param.$isAlreadyActive" />
									<set_value name="$isOk" exact="true" />
								</do_if>
								<do_elseif value="event.name == 'event_object_changed_attention'">
									<do_if value="event.object.isclass.station">
										<set_value name="$station_this" exact="event.object" />
										<set_value name="$isOk" exact="
											$attentionNearbyAndNearer.indexof.{event.param}
											and
											(not $attentionNearbyAndNearer.indexof.{event.param2})
											and
											$station_this != md.Notifications.Init.$kuertee_station_current
										" />
									</do_if>
								</do_elseif>
								<do_elseif value="event.name == 'event_player_teleport_successful'">
									<set_value name="$isTeleport" exact="true" />
									<do_if value="player.station">
										<set_value name="$station_this" exact="player.station" />
										<set_value name="$isOk" exact="
											(
												(not @md.Notifications.Init.$kuertee_station_current)
												or
												(not @param.hascontext.{@md.Notifications.Init.$kuertee_station_current})
											)
											and
											$station_this != md.Notifications.Init.$kuertee_station_current
										" />
									</do_if>
								</do_elseif>
								<do_if value="$isOk">
									<do_if value="not $isAlreadyActive">
										<do_if value="md.Notifications.Init.$kuertee_Cue_departOldStation.exists">
											<do_if value="md.Notifications.Init.$kuertee_Cue_departOldStation.state == cuestate.waiting">
												<signal_cue_instantly cue="md.Notifications.Init.$kuertee_Cue_departOldStation" />
											</do_if>
										</do_if>
										<set_value name="md.Notifications.Init.$kuertee_station_new" exact="$station_this" />
										<set_value name="md.Notifications.Init.$kuertee_station_old" exact="md.Notifications.Init.$kuertee_station_current" />
										<set_value name="md.Notifications.Init.$kuertee_station_current" exact="md.Notifications.Init.$kuertee_station_new" />
									</do_if>
									<do_else>
										<set_value name="md.Notifications.Init.$kuertee_station_new" exact="$station_this" />
										<set_value name="md.Notifications.Init.$kuertee_station_old" exact="md.Notifications.Init.$kuertee_station_current" />
										<set_value name="md.Notifications.Init.$kuertee_station_current" exact="md.Notifications.Init.$kuertee_station_new" />
										<raise_lua_event name="'Chat_Window_API.Print'" param="'K_ArriveStation $isAlreadyActive at: ' + @md.Notifications.Init.$kuertee_station_current.knownname" />
										<debug_text text="'K_ArriveStation $isAlreadyActive at: ' + @md.Notifications.Init.$kuertee_station_current.knownname" />
									</do_else>
								</do_if>
								<do_else>
									<cancel_cue cue="this" />
								</do_else>
							</actions>
							<cues>
								<cue name="K_DepartStation">
									<conditions>
										<check_any>
											<event_cue_signalled />
											<event_object_changed_attention object="md.Notifications.Init.$kuertee_station_current" />
										</check_any>
									</conditions>
									<actions>
										<debug_text text="'K_DepartStation: '+event.name" chance="global.$GB_Vault.$debug" />
										<set_value name="$isOk" exact="false" />
										<set_value name="$isOk" exact="
											event.name == 'event_cue_signalled'
											or
											(
												(not @$attentionNearbyAndNearer.indexof.{@event.param})
												and
												@$attentionNearbyAndNearer.indexof.{@event.param2}
											)
										" />
										<do_if value="$isOk">
											<set_value name="md.Notifications.Init.$kuertee_station_new" exact="null" />
											<set_value name="md.Notifications.Init.$kuertee_station_old" exact="md.Notifications.Init.$kuertee_station_current" />
											<signal_objects object="player.entity" param="'K_ArriveAndLeaveStations'" param2="table[$leaveFrom = md.Notifications.Init.$kuertee_station_old]" />
											<set_value name="md.Notifications.Init.$kuertee_station_current" exact="md.Notifications.Init.$kuertee_station_new" />
											<raise_lua_event name="'Chat_Window_API.Print'" param="'K_DepartStation new ' + @md.Notifications.Init.$kuertee_station_new.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
											<raise_lua_event name="'Chat_Window_API.Print'" param="'K_DepartStation old ' + @md.Notifications.Init.$kuertee_station_old.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
											<raise_lua_event name="'Chat_Window_API.Print'" param="'K_DepartStation current ' + @md.Notifications.Init.$kuertee_station_current.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
											<debug_text text="'kuertee K_DepartStation new ' + @md.Notifications.Init.$kuertee_station_new.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
											<debug_text text="'kuertee K_DepartStation old ' + @md.Notifications.Init.$kuertee_station_old.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
											<debug_text text="'kuertee K_DepartStation current ' + @md.Notifications.Init.$kuertee_station_current.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
											<cancel_cue cue="parent" />
											<reset_cue cue="this" />
										</do_if>
										<do_else>
											<reset_cue cue="this" />
										</do_else>
									</actions>
								</cue>
								<cue name="K_ArriveStation2">
									<actions>
										<debug_text text="'K_ArriveStation2: '+event.name" chance="global.$GB_Vault.$debug" />
										<set_value name="md.Notifications.Init.$kuertee_Cue_departOldStation" exact="K_DepartStation" />
										<do_if value="$isTeleport">
											<signal_objects object="player.entity" param="'K_ArriveAndLeaveStations'" param2="table[$teleportTo = md.Notifications.Init.$kuertee_station_new, $leaveFrom = md.Notifications.Init.$kuertee_station_old]" />
										</do_if>
										<do_else>
											<signal_objects object="player.entity" param="'K_ArriveAndLeaveStations'" param2="table[$arriveAt = md.Notifications.Init.$kuertee_station_new, $leaveFrom = md.Notifications.Init.$kuertee_station_old]" />
										</do_else>
										<raise_lua_event name="'Chat_Window_API.Print'" param="'K_ArriveStation new ' + @md.Notifications.Init.$kuertee_station_new.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
										<raise_lua_event name="'Chat_Window_API.Print'" param="'K_ArriveStation old ' + @md.Notifications.Init.$kuertee_station_old.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
										<raise_lua_event name="'Chat_Window_API.Print'" param="'K_ArriveStation current ' + @md.Notifications.Init.$kuertee_station_current.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
										<debug_text text="'kuertee K_ArriveStation new ' + @md.Notifications.Init.$kuertee_station_new.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
										<debug_text text="'kuertee K_ArriveStation old ' + @md.Notifications.Init.$kuertee_station_old.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
										<debug_text text="'kuertee K_ArriveStation current ' + @md.Notifications.Init.$kuertee_station_current.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
										<cancel_cue cue="this" />
									</actions>
								</cue>
								<cue name="K_DockedAtStation">
									<conditions>
										<!-- Event for the specified object docking (object = docking object, param = dock object, param2 = zone) -->
										<event_object_docked group="global.$PlayerContainerGroup" />
										<check_value value="event.param.isclass.station" />
										<check_value value="@event.param.macro != @macro.landmarks_par_monument_01_macro" />
										<check_value value="@event.param.macro != @macro.torus_maze_macro" />
									</conditions>
									<actions>
										<debug_text text="'K_DockedAtStation: '+event.name" chance="global.$GB_Vault.$debug" />
										<!-- <raise_lua_event name="'Chat_Window_API.Print'" param="'K_DockedAtStation player.station ' + @$player.station.knownname" chance="@md.Notifications.Init.$kuertee_debug" /> -->
										<set_value name="md.Notifications.Init.$kuertee_station_current" exact="event.param" />
										<signal_objects object="player.entity" param="'K_ArriveAndLeaveStations'" param2="table[$dockAt = md.Notifications.Init.$kuertee_station_current]" />
										<raise_lua_event name="'Chat_Window_API.Print'" param="'K_DockedAtStation station_current ' + @md.Notifications.Init.$kuertee_station_current.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
										<debug_text text="'kuertee K_DockedAtStation current ' + @md.Notifications.Init.$kuertee_station_current.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
										<reset_cue cue="this" />
									</actions>
								</cue>
								<cue name="K_UndockedFromStation">
									<conditions>
										<!-- Event for the specified object undocking (object = undocking object, param = dock, param2 = zone) -->
										<event_object_undocked group="global.$PlayerContainerGroup" />
										<check_value value="event.param.isclass.station" />
										<check_value value="@event.param.macro != @macro.landmarks_par_monument_01_macro" />
										<check_value value="@event.param.macro != @macro.torus_maze_macro" />
									</conditions>
									<actions>
										<debug_text text="'K_UndockedFromStation: '+event.name" chance="global.$GB_Vault.$debug" />
										<set_value name="md.Notifications.Init.$kuertee_station_current" exact="event.param" />
										<signal_objects object="player.entity" param="'K_ArriveAndLeaveStations'" param2="table[$undockFrom = md.Notifications.Init.$kuertee_station_current]" />
										<raise_lua_event name="'Chat_Window_API.Print'" param="'K_UndockedFromStation station_current ' + @md.Notifications.Init.$kuertee_station_current.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
										<debug_text text="'kuertee K_UndockedFromStation current ' + @md.Notifications.Init.$kuertee_station_current.knownname" chance="@md.Notifications.Init.$kuertee_debug" />
										<reset_cue cue="this" />
									</actions>
								</cue>
							</cues>
						</cue>
						<cue name="K_ArriveAndLeaveStations_Debug" namespace="this">
							<conditions>
								<event_ui_triggered screen="'Chat_Window_API'" control="'text_entered'" />
								<check_value value="event.param3.$text == 'kuertee debug K_ArriveAndLeaveStations'" />
							</conditions>
							<actions>
								<debug_text text="'K_ArriveAndLeaveStations_Debug: '+event.name" chance="global.$GB_Vault.$debug" />
								<debug_text text="@event.param3" />
								<raise_lua_event name="'Chat_Window_API.Print'" param="@event.param3.$text" />
								<do_if value="@md.Notifications.Init.$kuertee_debug">
									<set_value name="md.Notifications.Init.$kuertee_debug" exact="0" />
								</do_if>
								<do_else>
									<set_value name="md.Notifications.Init.$kuertee_debug" exact="100" />
								</do_else>
								<reset_cue cue="this" />
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="K_ArriveAndLeaveStations_Init2" namespace="this">
					<conditions>
						<check_any>
							<event_cue_signalled />
							<event_game_loaded />
						</check_any>
						<check_value value="not @player.allmodules.{player.module}.isscenario" />
					</conditions>
					<actions>
						<debug_text text="'K_ArriveAndLeaveStations_Init2: '+event.name" chance="global.$GB_Vault.$debug" />
						<!-- save station current -->
						<set_value name="$station_current" exact="@md.Notifications.Init.$kuertee_station_current" />
						<do_if value="not @$station_current.exists">
							<set_value name="$station_current" exact="@K_ArriveAndLeaveStations.$kuertee_station_current" />
							<do_if value="not @$station_current.exists">
								<set_value name="$station_current" exact="@K_ArriveAndLeaveStations.$station_current" />
							</do_if>
						</do_if>
						<debug_text text="'$station_current: ' + $station_current + ' (' + @$station_current.knownname + ')'" />
						<do_if value="@md.Notifications.Init.$kuertee_ArriveAndLeaveStations.exists">
							<!-- deregister at every load -->
							<remove_value name="md.Notifications.Init.$kuertee_ArriveAndLeaveStations" />
						</do_if>
						<set_value name="$initDelay" min="0.0s" max="1.0s" />
						<debug_text text="'$initDelay: ' + $initDelay" />
						<!-- reset cue at every load -->
						<reset_cue cue="K_ArriveAndLeaveStations" />
					</actions>
					<cues>
						<cue name="K_ArriveAndLeaveStations_Init3" checktime="player.age + $initDelay">
							<actions>
								<debug_text text="'K_ArriveAndLeaveStations_Init3: '+event.name" chance="global.$GB_Vault.$debug" />
								<do_if value="not @md.Notifications.Init.$kuertee_ArriveAndLeaveStations.exists">
									<!-- no K_ArriveAndLeaveStations registered -->
									<!-- register this K_ArriveAndLeaveStations -->
									<set_value name="md.Notifications.Init.$kuertee_ArriveAndLeaveStations" exact="K_ArriveAndLeaveStations" />
									<debug_text text="'$kuertee_ArriveAndLeaveStations: ' + @md.Notifications.Init.$kuertee_ArriveAndLeaveStations" />
								</do_if>
								<do_else>
									<!-- cancel this K_ArriveAndLeaveStations, so only one exists -->
									<debug_text text="'cancel_cue ' + K_ArriveAndLeaveStations" />
									<cancel_cue cue="K_ArriveAndLeaveStations" />
									<reset_cue cue="parent" />
								</do_else>
							</actions>
							<cues>
								<cue name="K_ArriveAndLeaveStations_Init4">
									<actions>
										<debug_text text="'K_ArriveAndLeaveStations_Init4: '+event.name" chance="global.$GB_Vault.$debug" />
										<do_if value="not @$station_current.exists">
											<find_station name="$station" sortbydistanceto="player.entity" space="player.sector" />
											<do_if value="[attention.nearby, attention.adjacentroom, attention.inroom].indexof.{$station.attention}">
												<set_value name="$station_current" exact="$station" />
												<debug_text text="'$station_current (found nearby): ' + $station_current + ' (' + $station_current.knownname + ')'" />
											</do_if>
											<reset_cue cue="K_ArriveAndLeaveStations_Init2" />
										</do_if>
										<do_if value="@$station_current.exists">
											<!-- if there was a $station_current, prepare K_ArriveAndLeaveStations with it -->
											<!-- this is required so that K_DepartStation can continue with $station_current -->
											<!-- <debug_text text="'$kuertee_ArriveAndLeaveStations setting for $station_current: ' + $station_current + ' (' + $station_current.knownname + ')'" /> -->
											<!-- <signal_cue_instantly cue="K_ArriveStation" param="table[$station = $station_current, $isAlreadyActive = true]" /> -->
											<!-- <reset_cue cue="K_ArriveAndLeaveStations_Init2" /> -->
										</do_if>
									</actions>
									<cues>
										<cue name="K_ArriveAndLeaveStations_Init5">
											<actions>
												<debug_text text="'K_ArriveAndLeaveStations_Init5: '+event.name" chance="global.$GB_Vault.$debug" />
												<debug_text text="'$kuertee_ArriveAndLeaveStations setting for $station_current: ' + $station_current + ' (' + $station_current.knownname + ')'" />
												<signal_cue_instantly cue="K_ArriveStation" param="table[$station = $station_current, $isAlreadyActive = true]" />
												<reset_cue cue="K_ArriveAndLeaveStations_Init2" />
											</actions>
										</cue>
									</cues>
								</cue>
							</cues>
						</cue>
					</cues>
				</cue>
				<cue name="K_ArriveAndLeaveStations_FirstRun2">
					<actions>
						<debug_text text="'K_ArriveAndLeaveStations_FirstRun2: '+event.name" chance="global.$GB_Vault.$debug" />
						<signal_cue cue="K_ArriveAndLeaveStations_Init2" />
					</actions>
				</cue>
			</cues>
		</cue>

		<cue name="OnLuaLoaderReady">
			<conditions>
				<event_ui_triggered screen="'Lua_Loader'" control="'Ready'" />
			</conditions>
			<actions>
				<debug_text text="'OnLuaLoaderReady: '+event.name" chance="global.$GB_Vault.$debug" />
				<raise_lua_event name="'Lua_Loader.Load'" param="'extensions.kuertee_ui_extensions.ui.kuertee_menu_interactmenu'" />
				<raise_lua_event name="'Interact_Menu_API.Add_Custom_Actions_Group_Id'" param="'hacking_menu'" />
				<raise_lua_event name="'Interact_Menu_API.Add_Custom_Actions_Group_Text'" param="{20777, 404404}" />
			</actions>
		</cue>
		<cue name="OnLuaLoaderReadyCompleted">
			<conditions>
				<event_cue_completed cue="OnLuaLoaderReady" />
			</conditions>
			<actions>
				<debug_text text="'OnLuaLoaderReadyCompleted: '+event.name" chance="global.$GB_Vault.$debug" />
				<reset_cue cue="OnLuaLoaderReady" />
				<reset_cue cue="this" />
			</actions>
		</cue>
	</cues>
</mdscript>